
F401RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002aa0  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002c34  08002c34  00012c34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c4c  08002c4c  00020044  2**0
                  CONTENTS
  4 .ARM          00000008  08002c4c  08002c4c  00012c4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002c54  08002c54  00020044  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c54  08002c54  00012c54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c58  08002c58  00012c58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000044  20000000  08002c5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  20000044  08002ca0  00020044  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ec  08002ca0  000200ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008e2f  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015bc  00000000  00000000  00028ea3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006b8  00000000  00000000  0002a460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000640  00000000  00000000  0002ab18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000148e7  00000000  00000000  0002b158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000084dd  00000000  00000000  0003fa3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081168  00000000  00000000  00047f1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c9084  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a60  00000000  00000000  000c90d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000044 	.word	0x20000044
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002c1c 	.word	0x08002c1c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000048 	.word	0x20000048
 80001d0:	08002c1c 	.word	0x08002c1c

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <__aeabi_uldivmod>:
 80001e4:	b953      	cbnz	r3, 80001fc <__aeabi_uldivmod+0x18>
 80001e6:	b94a      	cbnz	r2, 80001fc <__aeabi_uldivmod+0x18>
 80001e8:	2900      	cmp	r1, #0
 80001ea:	bf08      	it	eq
 80001ec:	2800      	cmpeq	r0, #0
 80001ee:	bf1c      	itt	ne
 80001f0:	f04f 31ff 	movne.w	r1, #4294967295
 80001f4:	f04f 30ff 	movne.w	r0, #4294967295
 80001f8:	f000 b96e 	b.w	80004d8 <__aeabi_idiv0>
 80001fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000200:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000204:	f000 f806 	bl	8000214 <__udivmoddi4>
 8000208:	f8dd e004 	ldr.w	lr, [sp, #4]
 800020c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000210:	b004      	add	sp, #16
 8000212:	4770      	bx	lr

08000214 <__udivmoddi4>:
 8000214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000218:	9d08      	ldr	r5, [sp, #32]
 800021a:	4604      	mov	r4, r0
 800021c:	468c      	mov	ip, r1
 800021e:	2b00      	cmp	r3, #0
 8000220:	f040 8083 	bne.w	800032a <__udivmoddi4+0x116>
 8000224:	428a      	cmp	r2, r1
 8000226:	4617      	mov	r7, r2
 8000228:	d947      	bls.n	80002ba <__udivmoddi4+0xa6>
 800022a:	fab2 f282 	clz	r2, r2
 800022e:	b142      	cbz	r2, 8000242 <__udivmoddi4+0x2e>
 8000230:	f1c2 0020 	rsb	r0, r2, #32
 8000234:	fa24 f000 	lsr.w	r0, r4, r0
 8000238:	4091      	lsls	r1, r2
 800023a:	4097      	lsls	r7, r2
 800023c:	ea40 0c01 	orr.w	ip, r0, r1
 8000240:	4094      	lsls	r4, r2
 8000242:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000246:	0c23      	lsrs	r3, r4, #16
 8000248:	fbbc f6f8 	udiv	r6, ip, r8
 800024c:	fa1f fe87 	uxth.w	lr, r7
 8000250:	fb08 c116 	mls	r1, r8, r6, ip
 8000254:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000258:	fb06 f10e 	mul.w	r1, r6, lr
 800025c:	4299      	cmp	r1, r3
 800025e:	d909      	bls.n	8000274 <__udivmoddi4+0x60>
 8000260:	18fb      	adds	r3, r7, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 8119 	bcs.w	800049c <__udivmoddi4+0x288>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 8116 	bls.w	800049c <__udivmoddi4+0x288>
 8000270:	3e02      	subs	r6, #2
 8000272:	443b      	add	r3, r7
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 fe0e 	mul.w	lr, r0, lr
 8000288:	45a6      	cmp	lr, r4
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x8c>
 800028c:	193c      	adds	r4, r7, r4
 800028e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000292:	f080 8105 	bcs.w	80004a0 <__udivmoddi4+0x28c>
 8000296:	45a6      	cmp	lr, r4
 8000298:	f240 8102 	bls.w	80004a0 <__udivmoddi4+0x28c>
 800029c:	3802      	subs	r0, #2
 800029e:	443c      	add	r4, r7
 80002a0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a4:	eba4 040e 	sub.w	r4, r4, lr
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa0>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	b902      	cbnz	r2, 80002be <__udivmoddi4+0xaa>
 80002bc:	deff      	udf	#255	; 0xff
 80002be:	fab2 f282 	clz	r2, r2
 80002c2:	2a00      	cmp	r2, #0
 80002c4:	d150      	bne.n	8000368 <__udivmoddi4+0x154>
 80002c6:	1bcb      	subs	r3, r1, r7
 80002c8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002cc:	fa1f f887 	uxth.w	r8, r7
 80002d0:	2601      	movs	r6, #1
 80002d2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002d6:	0c21      	lsrs	r1, r4, #16
 80002d8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002e0:	fb08 f30c 	mul.w	r3, r8, ip
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d907      	bls.n	80002f8 <__udivmoddi4+0xe4>
 80002e8:	1879      	adds	r1, r7, r1
 80002ea:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002ee:	d202      	bcs.n	80002f6 <__udivmoddi4+0xe2>
 80002f0:	428b      	cmp	r3, r1
 80002f2:	f200 80e9 	bhi.w	80004c8 <__udivmoddi4+0x2b4>
 80002f6:	4684      	mov	ip, r0
 80002f8:	1ac9      	subs	r1, r1, r3
 80002fa:	b2a3      	uxth	r3, r4
 80002fc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000300:	fb0e 1110 	mls	r1, lr, r0, r1
 8000304:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000308:	fb08 f800 	mul.w	r8, r8, r0
 800030c:	45a0      	cmp	r8, r4
 800030e:	d907      	bls.n	8000320 <__udivmoddi4+0x10c>
 8000310:	193c      	adds	r4, r7, r4
 8000312:	f100 33ff 	add.w	r3, r0, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x10a>
 8000318:	45a0      	cmp	r8, r4
 800031a:	f200 80d9 	bhi.w	80004d0 <__udivmoddi4+0x2bc>
 800031e:	4618      	mov	r0, r3
 8000320:	eba4 0408 	sub.w	r4, r4, r8
 8000324:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000328:	e7bf      	b.n	80002aa <__udivmoddi4+0x96>
 800032a:	428b      	cmp	r3, r1
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x12e>
 800032e:	2d00      	cmp	r5, #0
 8000330:	f000 80b1 	beq.w	8000496 <__udivmoddi4+0x282>
 8000334:	2600      	movs	r6, #0
 8000336:	e9c5 0100 	strd	r0, r1, [r5]
 800033a:	4630      	mov	r0, r6
 800033c:	4631      	mov	r1, r6
 800033e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000342:	fab3 f683 	clz	r6, r3
 8000346:	2e00      	cmp	r6, #0
 8000348:	d14a      	bne.n	80003e0 <__udivmoddi4+0x1cc>
 800034a:	428b      	cmp	r3, r1
 800034c:	d302      	bcc.n	8000354 <__udivmoddi4+0x140>
 800034e:	4282      	cmp	r2, r0
 8000350:	f200 80b8 	bhi.w	80004c4 <__udivmoddi4+0x2b0>
 8000354:	1a84      	subs	r4, r0, r2
 8000356:	eb61 0103 	sbc.w	r1, r1, r3
 800035a:	2001      	movs	r0, #1
 800035c:	468c      	mov	ip, r1
 800035e:	2d00      	cmp	r5, #0
 8000360:	d0a8      	beq.n	80002b4 <__udivmoddi4+0xa0>
 8000362:	e9c5 4c00 	strd	r4, ip, [r5]
 8000366:	e7a5      	b.n	80002b4 <__udivmoddi4+0xa0>
 8000368:	f1c2 0320 	rsb	r3, r2, #32
 800036c:	fa20 f603 	lsr.w	r6, r0, r3
 8000370:	4097      	lsls	r7, r2
 8000372:	fa01 f002 	lsl.w	r0, r1, r2
 8000376:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800037a:	40d9      	lsrs	r1, r3
 800037c:	4330      	orrs	r0, r6
 800037e:	0c03      	lsrs	r3, r0, #16
 8000380:	fbb1 f6fe 	udiv	r6, r1, lr
 8000384:	fa1f f887 	uxth.w	r8, r7
 8000388:	fb0e 1116 	mls	r1, lr, r6, r1
 800038c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000390:	fb06 f108 	mul.w	r1, r6, r8
 8000394:	4299      	cmp	r1, r3
 8000396:	fa04 f402 	lsl.w	r4, r4, r2
 800039a:	d909      	bls.n	80003b0 <__udivmoddi4+0x19c>
 800039c:	18fb      	adds	r3, r7, r3
 800039e:	f106 3cff 	add.w	ip, r6, #4294967295
 80003a2:	f080 808d 	bcs.w	80004c0 <__udivmoddi4+0x2ac>
 80003a6:	4299      	cmp	r1, r3
 80003a8:	f240 808a 	bls.w	80004c0 <__udivmoddi4+0x2ac>
 80003ac:	3e02      	subs	r6, #2
 80003ae:	443b      	add	r3, r7
 80003b0:	1a5b      	subs	r3, r3, r1
 80003b2:	b281      	uxth	r1, r0
 80003b4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003b8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003c0:	fb00 f308 	mul.w	r3, r0, r8
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d907      	bls.n	80003d8 <__udivmoddi4+0x1c4>
 80003c8:	1879      	adds	r1, r7, r1
 80003ca:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ce:	d273      	bcs.n	80004b8 <__udivmoddi4+0x2a4>
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d971      	bls.n	80004b8 <__udivmoddi4+0x2a4>
 80003d4:	3802      	subs	r0, #2
 80003d6:	4439      	add	r1, r7
 80003d8:	1acb      	subs	r3, r1, r3
 80003da:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003de:	e778      	b.n	80002d2 <__udivmoddi4+0xbe>
 80003e0:	f1c6 0c20 	rsb	ip, r6, #32
 80003e4:	fa03 f406 	lsl.w	r4, r3, r6
 80003e8:	fa22 f30c 	lsr.w	r3, r2, ip
 80003ec:	431c      	orrs	r4, r3
 80003ee:	fa20 f70c 	lsr.w	r7, r0, ip
 80003f2:	fa01 f306 	lsl.w	r3, r1, r6
 80003f6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003fa:	fa21 f10c 	lsr.w	r1, r1, ip
 80003fe:	431f      	orrs	r7, r3
 8000400:	0c3b      	lsrs	r3, r7, #16
 8000402:	fbb1 f9fe 	udiv	r9, r1, lr
 8000406:	fa1f f884 	uxth.w	r8, r4
 800040a:	fb0e 1119 	mls	r1, lr, r9, r1
 800040e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000412:	fb09 fa08 	mul.w	sl, r9, r8
 8000416:	458a      	cmp	sl, r1
 8000418:	fa02 f206 	lsl.w	r2, r2, r6
 800041c:	fa00 f306 	lsl.w	r3, r0, r6
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x220>
 8000422:	1861      	adds	r1, r4, r1
 8000424:	f109 30ff 	add.w	r0, r9, #4294967295
 8000428:	d248      	bcs.n	80004bc <__udivmoddi4+0x2a8>
 800042a:	458a      	cmp	sl, r1
 800042c:	d946      	bls.n	80004bc <__udivmoddi4+0x2a8>
 800042e:	f1a9 0902 	sub.w	r9, r9, #2
 8000432:	4421      	add	r1, r4
 8000434:	eba1 010a 	sub.w	r1, r1, sl
 8000438:	b2bf      	uxth	r7, r7
 800043a:	fbb1 f0fe 	udiv	r0, r1, lr
 800043e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000442:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000446:	fb00 f808 	mul.w	r8, r0, r8
 800044a:	45b8      	cmp	r8, r7
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x24a>
 800044e:	19e7      	adds	r7, r4, r7
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295
 8000454:	d22e      	bcs.n	80004b4 <__udivmoddi4+0x2a0>
 8000456:	45b8      	cmp	r8, r7
 8000458:	d92c      	bls.n	80004b4 <__udivmoddi4+0x2a0>
 800045a:	3802      	subs	r0, #2
 800045c:	4427      	add	r7, r4
 800045e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000462:	eba7 0708 	sub.w	r7, r7, r8
 8000466:	fba0 8902 	umull	r8, r9, r0, r2
 800046a:	454f      	cmp	r7, r9
 800046c:	46c6      	mov	lr, r8
 800046e:	4649      	mov	r1, r9
 8000470:	d31a      	bcc.n	80004a8 <__udivmoddi4+0x294>
 8000472:	d017      	beq.n	80004a4 <__udivmoddi4+0x290>
 8000474:	b15d      	cbz	r5, 800048e <__udivmoddi4+0x27a>
 8000476:	ebb3 020e 	subs.w	r2, r3, lr
 800047a:	eb67 0701 	sbc.w	r7, r7, r1
 800047e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000482:	40f2      	lsrs	r2, r6
 8000484:	ea4c 0202 	orr.w	r2, ip, r2
 8000488:	40f7      	lsrs	r7, r6
 800048a:	e9c5 2700 	strd	r2, r7, [r5]
 800048e:	2600      	movs	r6, #0
 8000490:	4631      	mov	r1, r6
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e70b      	b.n	80002b4 <__udivmoddi4+0xa0>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e9      	b.n	8000274 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fd      	b.n	80002a0 <__udivmoddi4+0x8c>
 80004a4:	4543      	cmp	r3, r8
 80004a6:	d2e5      	bcs.n	8000474 <__udivmoddi4+0x260>
 80004a8:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ac:	eb69 0104 	sbc.w	r1, r9, r4
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7df      	b.n	8000474 <__udivmoddi4+0x260>
 80004b4:	4608      	mov	r0, r1
 80004b6:	e7d2      	b.n	800045e <__udivmoddi4+0x24a>
 80004b8:	4660      	mov	r0, ip
 80004ba:	e78d      	b.n	80003d8 <__udivmoddi4+0x1c4>
 80004bc:	4681      	mov	r9, r0
 80004be:	e7b9      	b.n	8000434 <__udivmoddi4+0x220>
 80004c0:	4666      	mov	r6, ip
 80004c2:	e775      	b.n	80003b0 <__udivmoddi4+0x19c>
 80004c4:	4630      	mov	r0, r6
 80004c6:	e74a      	b.n	800035e <__udivmoddi4+0x14a>
 80004c8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004cc:	4439      	add	r1, r7
 80004ce:	e713      	b.n	80002f8 <__udivmoddi4+0xe4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	443c      	add	r4, r7
 80004d4:	e724      	b.n	8000320 <__udivmoddi4+0x10c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e0:	f000 fb80 	bl	8000be4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e4:	f000 f8e4 	bl	80006b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e8:	f000 f9a2 	bl	8000830 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004ec:	f000 f976 	bl	80007dc <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80004f0:	f000 f94a 	bl	8000788 <MX_USART1_UART_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  	  	  	  	  	  	  	  // RFID kart 1 Kontrolü -- MEG-- Kartı kontrolü
	  if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1){
 80004f4:	2102      	movs	r1, #2
 80004f6:	4863      	ldr	r0, [pc, #396]	; (8000684 <main+0x1a8>)
 80004f8:	f000 ff32 	bl	8001360 <HAL_GPIO_ReadPin>
 80004fc:	4603      	mov	r3, r0
 80004fe:	2b01      	cmp	r3, #1
 8000500:	d10e      	bne.n	8000520 <main+0x44>

		  HAL_UART_Transmit(&huart2, mydata, strlen(mydata), 100);
 8000502:	4861      	ldr	r0, [pc, #388]	; (8000688 <main+0x1ac>)
 8000504:	f7ff fe66 	bl	80001d4 <strlen>
 8000508:	4603      	mov	r3, r0
 800050a:	b29a      	uxth	r2, r3
 800050c:	2364      	movs	r3, #100	; 0x64
 800050e:	495e      	ldr	r1, [pc, #376]	; (8000688 <main+0x1ac>)
 8000510:	485e      	ldr	r0, [pc, #376]	; (800068c <main+0x1b0>)
 8000512:	f001 fc3c 	bl	8001d8e <HAL_UART_Transmit>
		  HAL_Delay(1000);
 8000516:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800051a:	f000 fbd5 	bl	8000cc8 <HAL_Delay>
 800051e:	e7e9      	b.n	80004f4 <main+0x18>

		  // A8 pini HIGH oldugunda Seri Porta MEG verisini yollar
	  }

	  	  	  	  	  	  	  	  // RFID kart 2 Kontrolü -- MUTLU-- Kartı kontrolü
	  else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == 1){
 8000520:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000524:	4857      	ldr	r0, [pc, #348]	; (8000684 <main+0x1a8>)
 8000526:	f000 ff1b 	bl	8001360 <HAL_GPIO_ReadPin>
 800052a:	4603      	mov	r3, r0
 800052c:	2b01      	cmp	r3, #1
 800052e:	d10e      	bne.n	800054e <main+0x72>

		  HAL_UART_Transmit(&huart2, mydata2, strlen(mydata2), 100);
 8000530:	4857      	ldr	r0, [pc, #348]	; (8000690 <main+0x1b4>)
 8000532:	f7ff fe4f 	bl	80001d4 <strlen>
 8000536:	4603      	mov	r3, r0
 8000538:	b29a      	uxth	r2, r3
 800053a:	2364      	movs	r3, #100	; 0x64
 800053c:	4954      	ldr	r1, [pc, #336]	; (8000690 <main+0x1b4>)
 800053e:	4853      	ldr	r0, [pc, #332]	; (800068c <main+0x1b0>)
 8000540:	f001 fc25 	bl	8001d8e <HAL_UART_Transmit>
		  HAL_Delay(1000);
 8000544:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000548:	f000 fbbe 	bl	8000cc8 <HAL_Delay>
 800054c:	e7d2      	b.n	80004f4 <main+0x18>
	  }
	  	  	  	  	  	  	  // RFID kart 3 Kontrolü -- BERKAY-- Kartı kontrolü
	  else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14)== 1){
 800054e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000552:	484c      	ldr	r0, [pc, #304]	; (8000684 <main+0x1a8>)
 8000554:	f000 ff04 	bl	8001360 <HAL_GPIO_ReadPin>
 8000558:	4603      	mov	r3, r0
 800055a:	2b01      	cmp	r3, #1
 800055c:	d10e      	bne.n	800057c <main+0xa0>

	  		  HAL_UART_Transmit(&huart2, mydata3, strlen(mydata3), 100);
 800055e:	484d      	ldr	r0, [pc, #308]	; (8000694 <main+0x1b8>)
 8000560:	f7ff fe38 	bl	80001d4 <strlen>
 8000564:	4603      	mov	r3, r0
 8000566:	b29a      	uxth	r2, r3
 8000568:	2364      	movs	r3, #100	; 0x64
 800056a:	494a      	ldr	r1, [pc, #296]	; (8000694 <main+0x1b8>)
 800056c:	4847      	ldr	r0, [pc, #284]	; (800068c <main+0x1b0>)
 800056e:	f001 fc0e 	bl	8001d8e <HAL_UART_Transmit>
	  		  HAL_Delay(1000);
 8000572:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000576:	f000 fba7 	bl	8000cc8 <HAL_Delay>
 800057a:	e7bb      	b.n	80004f4 <main+0x18>
	  	  		  HAL_Delay(1000);
	  	  	  }

*/

	  else if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5) == 1) {
 800057c:	2120      	movs	r1, #32
 800057e:	4846      	ldr	r0, [pc, #280]	; (8000698 <main+0x1bc>)
 8000580:	f000 feee 	bl	8001360 <HAL_GPIO_ReadPin>
 8000584:	4603      	mov	r3, r0
 8000586:	2b01      	cmp	r3, #1
 8000588:	d118      	bne.n	80005bc <main+0xe0>

		  HAL_UART_Transmit(&huart2, regButton, strlen(regButton), 100);
 800058a:	4844      	ldr	r0, [pc, #272]	; (800069c <main+0x1c0>)
 800058c:	f7ff fe22 	bl	80001d4 <strlen>
 8000590:	4603      	mov	r3, r0
 8000592:	b29a      	uxth	r2, r3
 8000594:	2364      	movs	r3, #100	; 0x64
 8000596:	4941      	ldr	r1, [pc, #260]	; (800069c <main+0x1c0>)
 8000598:	483c      	ldr	r0, [pc, #240]	; (800068c <main+0x1b0>)
 800059a:	f001 fbf8 	bl	8001d8e <HAL_UART_Transmit>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 800059e:	2201      	movs	r2, #1
 80005a0:	2120      	movs	r1, #32
 80005a2:	483f      	ldr	r0, [pc, #252]	; (80006a0 <main+0x1c4>)
 80005a4:	f000 fef4 	bl	8001390 <HAL_GPIO_WritePin>
		  HAL_Delay(1000);
 80005a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005ac:	f000 fb8c 	bl	8000cc8 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 80005b0:	2200      	movs	r2, #0
 80005b2:	2120      	movs	r1, #32
 80005b4:	483a      	ldr	r0, [pc, #232]	; (80006a0 <main+0x1c4>)
 80005b6:	f000 feeb 	bl	8001390 <HAL_GPIO_WritePin>
 80005ba:	e79b      	b.n	80004f4 <main+0x18>

	  }

	  else if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12) == 1) {
 80005bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005c0:	4837      	ldr	r0, [pc, #220]	; (80006a0 <main+0x1c4>)
 80005c2:	f000 fecd 	bl	8001360 <HAL_GPIO_ReadPin>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b01      	cmp	r3, #1
 80005ca:	d118      	bne.n	80005fe <main+0x122>

	  		  HAL_UART_Transmit(&huart2, updateButton, strlen(updateButton), 100);
 80005cc:	4835      	ldr	r0, [pc, #212]	; (80006a4 <main+0x1c8>)
 80005ce:	f7ff fe01 	bl	80001d4 <strlen>
 80005d2:	4603      	mov	r3, r0
 80005d4:	b29a      	uxth	r2, r3
 80005d6:	2364      	movs	r3, #100	; 0x64
 80005d8:	4932      	ldr	r1, [pc, #200]	; (80006a4 <main+0x1c8>)
 80005da:	482c      	ldr	r0, [pc, #176]	; (800068c <main+0x1b0>)
 80005dc:	f001 fbd7 	bl	8001d8e <HAL_UART_Transmit>
	  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 80005e0:	2201      	movs	r2, #1
 80005e2:	2120      	movs	r1, #32
 80005e4:	482e      	ldr	r0, [pc, #184]	; (80006a0 <main+0x1c4>)
 80005e6:	f000 fed3 	bl	8001390 <HAL_GPIO_WritePin>
	  		  HAL_Delay(1000);
 80005ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005ee:	f000 fb6b 	bl	8000cc8 <HAL_Delay>
	  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 80005f2:	2200      	movs	r2, #0
 80005f4:	2120      	movs	r1, #32
 80005f6:	482a      	ldr	r0, [pc, #168]	; (80006a0 <main+0x1c4>)
 80005f8:	f000 feca 	bl	8001390 <HAL_GPIO_WritePin>
 80005fc:	e77a      	b.n	80004f4 <main+0x18>

	  	  }

	  else if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == 1) {
 80005fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000602:	4827      	ldr	r0, [pc, #156]	; (80006a0 <main+0x1c4>)
 8000604:	f000 feac 	bl	8001360 <HAL_GPIO_ReadPin>
 8000608:	4603      	mov	r3, r0
 800060a:	2b01      	cmp	r3, #1
 800060c:	d118      	bne.n	8000640 <main+0x164>

	  	  		  HAL_UART_Transmit(&huart2, LISTButton, strlen(LISTButton), 100);
 800060e:	4826      	ldr	r0, [pc, #152]	; (80006a8 <main+0x1cc>)
 8000610:	f7ff fde0 	bl	80001d4 <strlen>
 8000614:	4603      	mov	r3, r0
 8000616:	b29a      	uxth	r2, r3
 8000618:	2364      	movs	r3, #100	; 0x64
 800061a:	4923      	ldr	r1, [pc, #140]	; (80006a8 <main+0x1cc>)
 800061c:	481b      	ldr	r0, [pc, #108]	; (800068c <main+0x1b0>)
 800061e:	f001 fbb6 	bl	8001d8e <HAL_UART_Transmit>
	  	  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8000622:	2201      	movs	r2, #1
 8000624:	2120      	movs	r1, #32
 8000626:	481e      	ldr	r0, [pc, #120]	; (80006a0 <main+0x1c4>)
 8000628:	f000 feb2 	bl	8001390 <HAL_GPIO_WritePin>
	  	  		  HAL_Delay(1000);
 800062c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000630:	f000 fb4a 	bl	8000cc8 <HAL_Delay>
	  	  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8000634:	2200      	movs	r2, #0
 8000636:	2120      	movs	r1, #32
 8000638:	4819      	ldr	r0, [pc, #100]	; (80006a0 <main+0x1c4>)
 800063a:	f000 fea9 	bl	8001390 <HAL_GPIO_WritePin>
 800063e:	e759      	b.n	80004f4 <main+0x18>

	  	  	  }

	  else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 1) {
 8000640:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000644:	480f      	ldr	r0, [pc, #60]	; (8000684 <main+0x1a8>)
 8000646:	f000 fe8b 	bl	8001360 <HAL_GPIO_ReadPin>
 800064a:	4603      	mov	r3, r0
 800064c:	2b01      	cmp	r3, #1
 800064e:	f47f af51 	bne.w	80004f4 <main+0x18>

	 	  	  		  HAL_UART_Transmit(&huart2, HESButton, strlen(HESButton), 100);
 8000652:	4816      	ldr	r0, [pc, #88]	; (80006ac <main+0x1d0>)
 8000654:	f7ff fdbe 	bl	80001d4 <strlen>
 8000658:	4603      	mov	r3, r0
 800065a:	b29a      	uxth	r2, r3
 800065c:	2364      	movs	r3, #100	; 0x64
 800065e:	4913      	ldr	r1, [pc, #76]	; (80006ac <main+0x1d0>)
 8000660:	480a      	ldr	r0, [pc, #40]	; (800068c <main+0x1b0>)
 8000662:	f001 fb94 	bl	8001d8e <HAL_UART_Transmit>
	 	  	  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8000666:	2201      	movs	r2, #1
 8000668:	2120      	movs	r1, #32
 800066a:	480d      	ldr	r0, [pc, #52]	; (80006a0 <main+0x1c4>)
 800066c:	f000 fe90 	bl	8001390 <HAL_GPIO_WritePin>
	 	  	  		  HAL_Delay(1000);
 8000670:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000674:	f000 fb28 	bl	8000cc8 <HAL_Delay>
	 	  	  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8000678:	2200      	movs	r2, #0
 800067a:	2120      	movs	r1, #32
 800067c:	4808      	ldr	r0, [pc, #32]	; (80006a0 <main+0x1c4>)
 800067e:	f000 fe87 	bl	8001390 <HAL_GPIO_WritePin>
	  if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1){
 8000682:	e737      	b.n	80004f4 <main+0x18>
 8000684:	40020400 	.word	0x40020400
 8000688:	20000000 	.word	0x20000000
 800068c:	200000a4 	.word	0x200000a4
 8000690:	20000008 	.word	0x20000008
 8000694:	20000010 	.word	0x20000010
 8000698:	40020800 	.word	0x40020800
 800069c:	20000018 	.word	0x20000018
 80006a0:	40020000 	.word	0x40020000
 80006a4:	20000020 	.word	0x20000020
 80006a8:	20000028 	.word	0x20000028
 80006ac:	20000030 	.word	0x20000030

080006b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b094      	sub	sp, #80	; 0x50
 80006b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b6:	f107 0320 	add.w	r3, r7, #32
 80006ba:	2230      	movs	r2, #48	; 0x30
 80006bc:	2100      	movs	r1, #0
 80006be:	4618      	mov	r0, r3
 80006c0:	f002 faa4 	bl	8002c0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c4:	f107 030c 	add.w	r3, r7, #12
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	605a      	str	r2, [r3, #4]
 80006ce:	609a      	str	r2, [r3, #8]
 80006d0:	60da      	str	r2, [r3, #12]
 80006d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d4:	2300      	movs	r3, #0
 80006d6:	60bb      	str	r3, [r7, #8]
 80006d8:	4b29      	ldr	r3, [pc, #164]	; (8000780 <SystemClock_Config+0xd0>)
 80006da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006dc:	4a28      	ldr	r2, [pc, #160]	; (8000780 <SystemClock_Config+0xd0>)
 80006de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006e2:	6413      	str	r3, [r2, #64]	; 0x40
 80006e4:	4b26      	ldr	r3, [pc, #152]	; (8000780 <SystemClock_Config+0xd0>)
 80006e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ec:	60bb      	str	r3, [r7, #8]
 80006ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80006f0:	2300      	movs	r3, #0
 80006f2:	607b      	str	r3, [r7, #4]
 80006f4:	4b23      	ldr	r3, [pc, #140]	; (8000784 <SystemClock_Config+0xd4>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006fc:	4a21      	ldr	r2, [pc, #132]	; (8000784 <SystemClock_Config+0xd4>)
 80006fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000702:	6013      	str	r3, [r2, #0]
 8000704:	4b1f      	ldr	r3, [pc, #124]	; (8000784 <SystemClock_Config+0xd4>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800070c:	607b      	str	r3, [r7, #4]
 800070e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000710:	2302      	movs	r3, #2
 8000712:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000714:	2301      	movs	r3, #1
 8000716:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000718:	2310      	movs	r3, #16
 800071a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800071c:	2302      	movs	r3, #2
 800071e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000720:	2300      	movs	r3, #0
 8000722:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000724:	2310      	movs	r3, #16
 8000726:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000728:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800072c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800072e:	2304      	movs	r3, #4
 8000730:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000732:	2307      	movs	r3, #7
 8000734:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000736:	f107 0320 	add.w	r3, r7, #32
 800073a:	4618      	mov	r0, r3
 800073c:	f000 fe66 	bl	800140c <HAL_RCC_OscConfig>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000746:	f000 f911 	bl	800096c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800074a:	230f      	movs	r3, #15
 800074c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800074e:	2302      	movs	r3, #2
 8000750:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000752:	2300      	movs	r3, #0
 8000754:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000756:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800075a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800075c:	2300      	movs	r3, #0
 800075e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000760:	f107 030c 	add.w	r3, r7, #12
 8000764:	2102      	movs	r1, #2
 8000766:	4618      	mov	r0, r3
 8000768:	f001 f8c8 	bl	80018fc <HAL_RCC_ClockConfig>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000772:	f000 f8fb 	bl	800096c <Error_Handler>
  }
}
 8000776:	bf00      	nop
 8000778:	3750      	adds	r7, #80	; 0x50
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	40023800 	.word	0x40023800
 8000784:	40007000 	.word	0x40007000

08000788 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800078c:	4b11      	ldr	r3, [pc, #68]	; (80007d4 <MX_USART1_UART_Init+0x4c>)
 800078e:	4a12      	ldr	r2, [pc, #72]	; (80007d8 <MX_USART1_UART_Init+0x50>)
 8000790:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000792:	4b10      	ldr	r3, [pc, #64]	; (80007d4 <MX_USART1_UART_Init+0x4c>)
 8000794:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000798:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800079a:	4b0e      	ldr	r3, [pc, #56]	; (80007d4 <MX_USART1_UART_Init+0x4c>)
 800079c:	2200      	movs	r2, #0
 800079e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007a0:	4b0c      	ldr	r3, [pc, #48]	; (80007d4 <MX_USART1_UART_Init+0x4c>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007a6:	4b0b      	ldr	r3, [pc, #44]	; (80007d4 <MX_USART1_UART_Init+0x4c>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007ac:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <MX_USART1_UART_Init+0x4c>)
 80007ae:	220c      	movs	r2, #12
 80007b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007b2:	4b08      	ldr	r3, [pc, #32]	; (80007d4 <MX_USART1_UART_Init+0x4c>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b8:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <MX_USART1_UART_Init+0x4c>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007be:	4805      	ldr	r0, [pc, #20]	; (80007d4 <MX_USART1_UART_Init+0x4c>)
 80007c0:	f001 fa98 	bl	8001cf4 <HAL_UART_Init>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80007ca:	f000 f8cf 	bl	800096c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007ce:	bf00      	nop
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	20000060 	.word	0x20000060
 80007d8:	40011000 	.word	0x40011000

080007dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007e0:	4b11      	ldr	r3, [pc, #68]	; (8000828 <MX_USART2_UART_Init+0x4c>)
 80007e2:	4a12      	ldr	r2, [pc, #72]	; (800082c <MX_USART2_UART_Init+0x50>)
 80007e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80007e6:	4b10      	ldr	r3, [pc, #64]	; (8000828 <MX_USART2_UART_Init+0x4c>)
 80007e8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80007ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ee:	4b0e      	ldr	r3, [pc, #56]	; (8000828 <MX_USART2_UART_Init+0x4c>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007f4:	4b0c      	ldr	r3, [pc, #48]	; (8000828 <MX_USART2_UART_Init+0x4c>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007fa:	4b0b      	ldr	r3, [pc, #44]	; (8000828 <MX_USART2_UART_Init+0x4c>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000800:	4b09      	ldr	r3, [pc, #36]	; (8000828 <MX_USART2_UART_Init+0x4c>)
 8000802:	220c      	movs	r2, #12
 8000804:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000806:	4b08      	ldr	r3, [pc, #32]	; (8000828 <MX_USART2_UART_Init+0x4c>)
 8000808:	2200      	movs	r2, #0
 800080a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800080c:	4b06      	ldr	r3, [pc, #24]	; (8000828 <MX_USART2_UART_Init+0x4c>)
 800080e:	2200      	movs	r2, #0
 8000810:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000812:	4805      	ldr	r0, [pc, #20]	; (8000828 <MX_USART2_UART_Init+0x4c>)
 8000814:	f001 fa6e 	bl	8001cf4 <HAL_UART_Init>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800081e:	f000 f8a5 	bl	800096c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	200000a4 	.word	0x200000a4
 800082c:	40004400 	.word	0x40004400

08000830 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b08a      	sub	sp, #40	; 0x28
 8000834:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000836:	f107 0314 	add.w	r3, r7, #20
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	605a      	str	r2, [r3, #4]
 8000840:	609a      	str	r2, [r3, #8]
 8000842:	60da      	str	r2, [r3, #12]
 8000844:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	613b      	str	r3, [r7, #16]
 800084a:	4b44      	ldr	r3, [pc, #272]	; (800095c <MX_GPIO_Init+0x12c>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a43      	ldr	r2, [pc, #268]	; (800095c <MX_GPIO_Init+0x12c>)
 8000850:	f043 0304 	orr.w	r3, r3, #4
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b41      	ldr	r3, [pc, #260]	; (800095c <MX_GPIO_Init+0x12c>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f003 0304 	and.w	r3, r3, #4
 800085e:	613b      	str	r3, [r7, #16]
 8000860:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	60fb      	str	r3, [r7, #12]
 8000866:	4b3d      	ldr	r3, [pc, #244]	; (800095c <MX_GPIO_Init+0x12c>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a3c      	ldr	r2, [pc, #240]	; (800095c <MX_GPIO_Init+0x12c>)
 800086c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4b3a      	ldr	r3, [pc, #232]	; (800095c <MX_GPIO_Init+0x12c>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800087a:	60fb      	str	r3, [r7, #12]
 800087c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	60bb      	str	r3, [r7, #8]
 8000882:	4b36      	ldr	r3, [pc, #216]	; (800095c <MX_GPIO_Init+0x12c>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	4a35      	ldr	r2, [pc, #212]	; (800095c <MX_GPIO_Init+0x12c>)
 8000888:	f043 0301 	orr.w	r3, r3, #1
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
 800088e:	4b33      	ldr	r3, [pc, #204]	; (800095c <MX_GPIO_Init+0x12c>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	f003 0301 	and.w	r3, r3, #1
 8000896:	60bb      	str	r3, [r7, #8]
 8000898:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	607b      	str	r3, [r7, #4]
 800089e:	4b2f      	ldr	r3, [pc, #188]	; (800095c <MX_GPIO_Init+0x12c>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4a2e      	ldr	r2, [pc, #184]	; (800095c <MX_GPIO_Init+0x12c>)
 80008a4:	f043 0302 	orr.w	r3, r3, #2
 80008a8:	6313      	str	r3, [r2, #48]	; 0x30
 80008aa:	4b2c      	ldr	r3, [pc, #176]	; (800095c <MX_GPIO_Init+0x12c>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	f003 0302 	and.w	r3, r3, #2
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008b6:	2200      	movs	r2, #0
 80008b8:	2120      	movs	r1, #32
 80008ba:	4829      	ldr	r0, [pc, #164]	; (8000960 <MX_GPIO_Init+0x130>)
 80008bc:	f000 fd68 	bl	8001390 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008c6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80008ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008d0:	f107 0314 	add.w	r3, r7, #20
 80008d4:	4619      	mov	r1, r3
 80008d6:	4823      	ldr	r0, [pc, #140]	; (8000964 <MX_GPIO_Init+0x134>)
 80008d8:	f000 fbbe 	bl	8001058 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008dc:	2320      	movs	r3, #32
 80008de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e0:	2301      	movs	r3, #1
 80008e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e8:	2300      	movs	r3, #0
 80008ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008ec:	f107 0314 	add.w	r3, r7, #20
 80008f0:	4619      	mov	r1, r3
 80008f2:	481b      	ldr	r0, [pc, #108]	; (8000960 <MX_GPIO_Init+0x130>)
 80008f4:	f000 fbb0 	bl	8001058 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC5 GPIO_Input_Buton1_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_Input_Buton1_Pin;
 80008f8:	23a0      	movs	r3, #160	; 0xa0
 80008fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008fc:	2300      	movs	r3, #0
 80008fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000904:	f107 0314 	add.w	r3, r7, #20
 8000908:	4619      	mov	r1, r3
 800090a:	4816      	ldr	r0, [pc, #88]	; (8000964 <MX_GPIO_Init+0x134>)
 800090c:	f000 fba4 	bl	8001058 <HAL_GPIO_Init>

  /*Configure GPIO pins : input_meg_Pin PB12 berkay_Pin input_mutu_Pin */
  GPIO_InitStruct.Pin = input_meg_Pin|GPIO_PIN_12|berkay_Pin|input_mutu_Pin;
 8000910:	f24d 0302 	movw	r3, #53250	; 0xd002
 8000914:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000916:	2300      	movs	r3, #0
 8000918:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	2300      	movs	r3, #0
 800091c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800091e:	f107 0314 	add.w	r3, r7, #20
 8000922:	4619      	mov	r1, r3
 8000924:	4810      	ldr	r0, [pc, #64]	; (8000968 <MX_GPIO_Init+0x138>)
 8000926:	f000 fb97 	bl	8001058 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_INPUT__PA8_____D7_Pin PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_INPUT__PA8_____D7_Pin|GPIO_PIN_11|GPIO_PIN_12;
 800092a:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800092e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000930:	2300      	movs	r3, #0
 8000932:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	2300      	movs	r3, #0
 8000936:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000938:	f107 0314 	add.w	r3, r7, #20
 800093c:	4619      	mov	r1, r3
 800093e:	4808      	ldr	r0, [pc, #32]	; (8000960 <MX_GPIO_Init+0x130>)
 8000940:	f000 fb8a 	bl	8001058 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000944:	2200      	movs	r2, #0
 8000946:	2100      	movs	r1, #0
 8000948:	2028      	movs	r0, #40	; 0x28
 800094a:	f000 fabc 	bl	8000ec6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800094e:	2028      	movs	r0, #40	; 0x28
 8000950:	f000 fad5 	bl	8000efe <HAL_NVIC_EnableIRQ>

}
 8000954:	bf00      	nop
 8000956:	3728      	adds	r7, #40	; 0x28
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	40023800 	.word	0x40023800
 8000960:	40020000 	.word	0x40020000
 8000964:	40020800 	.word	0x40020800
 8000968:	40020400 	.word	0x40020400

0800096c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000970:	b672      	cpsid	i
}
 8000972:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000974:	e7fe      	b.n	8000974 <Error_Handler+0x8>
	...

08000978 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	607b      	str	r3, [r7, #4]
 8000982:	4b10      	ldr	r3, [pc, #64]	; (80009c4 <HAL_MspInit+0x4c>)
 8000984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000986:	4a0f      	ldr	r2, [pc, #60]	; (80009c4 <HAL_MspInit+0x4c>)
 8000988:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800098c:	6453      	str	r3, [r2, #68]	; 0x44
 800098e:	4b0d      	ldr	r3, [pc, #52]	; (80009c4 <HAL_MspInit+0x4c>)
 8000990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000992:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000996:	607b      	str	r3, [r7, #4]
 8000998:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	603b      	str	r3, [r7, #0]
 800099e:	4b09      	ldr	r3, [pc, #36]	; (80009c4 <HAL_MspInit+0x4c>)
 80009a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a2:	4a08      	ldr	r2, [pc, #32]	; (80009c4 <HAL_MspInit+0x4c>)
 80009a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009a8:	6413      	str	r3, [r2, #64]	; 0x40
 80009aa:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <HAL_MspInit+0x4c>)
 80009ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009b2:	603b      	str	r3, [r7, #0]
 80009b4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009b6:	2007      	movs	r0, #7
 80009b8:	f000 fa7a 	bl	8000eb0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009bc:	bf00      	nop
 80009be:	3708      	adds	r7, #8
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	40023800 	.word	0x40023800

080009c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b08c      	sub	sp, #48	; 0x30
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d0:	f107 031c 	add.w	r3, r7, #28
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	605a      	str	r2, [r3, #4]
 80009da:	609a      	str	r2, [r3, #8]
 80009dc:	60da      	str	r2, [r3, #12]
 80009de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a3a      	ldr	r2, [pc, #232]	; (8000ad0 <HAL_UART_MspInit+0x108>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d135      	bne.n	8000a56 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	61bb      	str	r3, [r7, #24]
 80009ee:	4b39      	ldr	r3, [pc, #228]	; (8000ad4 <HAL_UART_MspInit+0x10c>)
 80009f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f2:	4a38      	ldr	r2, [pc, #224]	; (8000ad4 <HAL_UART_MspInit+0x10c>)
 80009f4:	f043 0310 	orr.w	r3, r3, #16
 80009f8:	6453      	str	r3, [r2, #68]	; 0x44
 80009fa:	4b36      	ldr	r3, [pc, #216]	; (8000ad4 <HAL_UART_MspInit+0x10c>)
 80009fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009fe:	f003 0310 	and.w	r3, r3, #16
 8000a02:	61bb      	str	r3, [r7, #24]
 8000a04:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	617b      	str	r3, [r7, #20]
 8000a0a:	4b32      	ldr	r3, [pc, #200]	; (8000ad4 <HAL_UART_MspInit+0x10c>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	4a31      	ldr	r2, [pc, #196]	; (8000ad4 <HAL_UART_MspInit+0x10c>)
 8000a10:	f043 0301 	orr.w	r3, r3, #1
 8000a14:	6313      	str	r3, [r2, #48]	; 0x30
 8000a16:	4b2f      	ldr	r3, [pc, #188]	; (8000ad4 <HAL_UART_MspInit+0x10c>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	f003 0301 	and.w	r3, r3, #1
 8000a1e:	617b      	str	r3, [r7, #20]
 8000a20:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a22:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000a26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a30:	2303      	movs	r3, #3
 8000a32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a34:	2307      	movs	r3, #7
 8000a36:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a38:	f107 031c 	add.w	r3, r7, #28
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4826      	ldr	r0, [pc, #152]	; (8000ad8 <HAL_UART_MspInit+0x110>)
 8000a40:	f000 fb0a 	bl	8001058 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000a44:	2200      	movs	r2, #0
 8000a46:	2100      	movs	r1, #0
 8000a48:	2025      	movs	r0, #37	; 0x25
 8000a4a:	f000 fa3c 	bl	8000ec6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000a4e:	2025      	movs	r0, #37	; 0x25
 8000a50:	f000 fa55 	bl	8000efe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a54:	e038      	b.n	8000ac8 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	4a20      	ldr	r2, [pc, #128]	; (8000adc <HAL_UART_MspInit+0x114>)
 8000a5c:	4293      	cmp	r3, r2
 8000a5e:	d133      	bne.n	8000ac8 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a60:	2300      	movs	r3, #0
 8000a62:	613b      	str	r3, [r7, #16]
 8000a64:	4b1b      	ldr	r3, [pc, #108]	; (8000ad4 <HAL_UART_MspInit+0x10c>)
 8000a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a68:	4a1a      	ldr	r2, [pc, #104]	; (8000ad4 <HAL_UART_MspInit+0x10c>)
 8000a6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a6e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a70:	4b18      	ldr	r3, [pc, #96]	; (8000ad4 <HAL_UART_MspInit+0x10c>)
 8000a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a78:	613b      	str	r3, [r7, #16]
 8000a7a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	4b14      	ldr	r3, [pc, #80]	; (8000ad4 <HAL_UART_MspInit+0x10c>)
 8000a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a84:	4a13      	ldr	r2, [pc, #76]	; (8000ad4 <HAL_UART_MspInit+0x10c>)
 8000a86:	f043 0301 	orr.w	r3, r3, #1
 8000a8a:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8c:	4b11      	ldr	r3, [pc, #68]	; (8000ad4 <HAL_UART_MspInit+0x10c>)
 8000a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a90:	f003 0301 	and.w	r3, r3, #1
 8000a94:	60fb      	str	r3, [r7, #12]
 8000a96:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a98:	230c      	movs	r3, #12
 8000a9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000aa8:	2307      	movs	r3, #7
 8000aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aac:	f107 031c 	add.w	r3, r7, #28
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4809      	ldr	r0, [pc, #36]	; (8000ad8 <HAL_UART_MspInit+0x110>)
 8000ab4:	f000 fad0 	bl	8001058 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ab8:	2200      	movs	r2, #0
 8000aba:	2100      	movs	r1, #0
 8000abc:	2026      	movs	r0, #38	; 0x26
 8000abe:	f000 fa02 	bl	8000ec6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ac2:	2026      	movs	r0, #38	; 0x26
 8000ac4:	f000 fa1b 	bl	8000efe <HAL_NVIC_EnableIRQ>
}
 8000ac8:	bf00      	nop
 8000aca:	3730      	adds	r7, #48	; 0x30
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	40011000 	.word	0x40011000
 8000ad4:	40023800 	.word	0x40023800
 8000ad8:	40020000 	.word	0x40020000
 8000adc:	40004400 	.word	0x40004400

08000ae0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ae4:	e7fe      	b.n	8000ae4 <NMI_Handler+0x4>

08000ae6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aea:	e7fe      	b.n	8000aea <HardFault_Handler+0x4>

08000aec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000af0:	e7fe      	b.n	8000af0 <MemManage_Handler+0x4>

08000af2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000af2:	b480      	push	{r7}
 8000af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000af6:	e7fe      	b.n	8000af6 <BusFault_Handler+0x4>

08000af8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000afc:	e7fe      	b.n	8000afc <UsageFault_Handler+0x4>

08000afe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000afe:	b480      	push	{r7}
 8000b00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b02:	bf00      	nop
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr

08000b0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b10:	bf00      	nop
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr

08000b1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr

08000b28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b2c:	f000 f8ac 	bl	8000c88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b30:	bf00      	nop
 8000b32:	bd80      	pop	{r7, pc}

08000b34 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000b38:	4802      	ldr	r0, [pc, #8]	; (8000b44 <USART1_IRQHandler+0x10>)
 8000b3a:	f001 f9bb 	bl	8001eb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	20000060 	.word	0x20000060

08000b48 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b4c:	4802      	ldr	r0, [pc, #8]	; (8000b58 <USART2_IRQHandler+0x10>)
 8000b4e:	f001 f9b1 	bl	8001eb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	200000a4 	.word	0x200000a4

08000b5c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000b60:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000b64:	f000 fc2e 	bl	80013c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b68:	bf00      	nop
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b70:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <SystemInit+0x20>)
 8000b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b76:	4a05      	ldr	r2, [pc, #20]	; (8000b8c <SystemInit+0x20>)
 8000b78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b80:	bf00      	nop
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	e000ed00 	.word	0xe000ed00

08000b90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bc8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b94:	480d      	ldr	r0, [pc, #52]	; (8000bcc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b96:	490e      	ldr	r1, [pc, #56]	; (8000bd0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b98:	4a0e      	ldr	r2, [pc, #56]	; (8000bd4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b9c:	e002      	b.n	8000ba4 <LoopCopyDataInit>

08000b9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ba0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ba2:	3304      	adds	r3, #4

08000ba4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ba4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ba6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ba8:	d3f9      	bcc.n	8000b9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000baa:	4a0b      	ldr	r2, [pc, #44]	; (8000bd8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bac:	4c0b      	ldr	r4, [pc, #44]	; (8000bdc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bb0:	e001      	b.n	8000bb6 <LoopFillZerobss>

08000bb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bb4:	3204      	adds	r2, #4

08000bb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bb8:	d3fb      	bcc.n	8000bb2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000bba:	f7ff ffd7 	bl	8000b6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bbe:	f002 f801 	bl	8002bc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bc2:	f7ff fc8b 	bl	80004dc <main>
  bx  lr    
 8000bc6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bc8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000bcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bd0:	20000044 	.word	0x20000044
  ldr r2, =_sidata
 8000bd4:	08002c5c 	.word	0x08002c5c
  ldr r2, =_sbss
 8000bd8:	20000044 	.word	0x20000044
  ldr r4, =_ebss
 8000bdc:	200000ec 	.word	0x200000ec

08000be0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000be0:	e7fe      	b.n	8000be0 <ADC_IRQHandler>
	...

08000be4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000be8:	4b0e      	ldr	r3, [pc, #56]	; (8000c24 <HAL_Init+0x40>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a0d      	ldr	r2, [pc, #52]	; (8000c24 <HAL_Init+0x40>)
 8000bee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bf2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bf4:	4b0b      	ldr	r3, [pc, #44]	; (8000c24 <HAL_Init+0x40>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a0a      	ldr	r2, [pc, #40]	; (8000c24 <HAL_Init+0x40>)
 8000bfa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bfe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c00:	4b08      	ldr	r3, [pc, #32]	; (8000c24 <HAL_Init+0x40>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a07      	ldr	r2, [pc, #28]	; (8000c24 <HAL_Init+0x40>)
 8000c06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c0c:	2003      	movs	r0, #3
 8000c0e:	f000 f94f 	bl	8000eb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c12:	2000      	movs	r0, #0
 8000c14:	f000 f808 	bl	8000c28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c18:	f7ff feae 	bl	8000978 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c1c:	2300      	movs	r3, #0
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	40023c00 	.word	0x40023c00

08000c28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c30:	4b12      	ldr	r3, [pc, #72]	; (8000c7c <HAL_InitTick+0x54>)
 8000c32:	681a      	ldr	r2, [r3, #0]
 8000c34:	4b12      	ldr	r3, [pc, #72]	; (8000c80 <HAL_InitTick+0x58>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	4619      	mov	r1, r3
 8000c3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c46:	4618      	mov	r0, r3
 8000c48:	f000 f967 	bl	8000f1a <HAL_SYSTICK_Config>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c52:	2301      	movs	r3, #1
 8000c54:	e00e      	b.n	8000c74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	2b0f      	cmp	r3, #15
 8000c5a:	d80a      	bhi.n	8000c72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	6879      	ldr	r1, [r7, #4]
 8000c60:	f04f 30ff 	mov.w	r0, #4294967295
 8000c64:	f000 f92f 	bl	8000ec6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c68:	4a06      	ldr	r2, [pc, #24]	; (8000c84 <HAL_InitTick+0x5c>)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	e000      	b.n	8000c74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c72:	2301      	movs	r3, #1
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	3708      	adds	r7, #8
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	20000038 	.word	0x20000038
 8000c80:	20000040 	.word	0x20000040
 8000c84:	2000003c 	.word	0x2000003c

08000c88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c8c:	4b06      	ldr	r3, [pc, #24]	; (8000ca8 <HAL_IncTick+0x20>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	461a      	mov	r2, r3
 8000c92:	4b06      	ldr	r3, [pc, #24]	; (8000cac <HAL_IncTick+0x24>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4413      	add	r3, r2
 8000c98:	4a04      	ldr	r2, [pc, #16]	; (8000cac <HAL_IncTick+0x24>)
 8000c9a:	6013      	str	r3, [r2, #0]
}
 8000c9c:	bf00      	nop
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	20000040 	.word	0x20000040
 8000cac:	200000e8 	.word	0x200000e8

08000cb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cb4:	4b03      	ldr	r3, [pc, #12]	; (8000cc4 <HAL_GetTick+0x14>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	200000e8 	.word	0x200000e8

08000cc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b084      	sub	sp, #16
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cd0:	f7ff ffee 	bl	8000cb0 <HAL_GetTick>
 8000cd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ce0:	d005      	beq.n	8000cee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ce2:	4b0a      	ldr	r3, [pc, #40]	; (8000d0c <HAL_Delay+0x44>)
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	461a      	mov	r2, r3
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	4413      	add	r3, r2
 8000cec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000cee:	bf00      	nop
 8000cf0:	f7ff ffde 	bl	8000cb0 <HAL_GetTick>
 8000cf4:	4602      	mov	r2, r0
 8000cf6:	68bb      	ldr	r3, [r7, #8]
 8000cf8:	1ad3      	subs	r3, r2, r3
 8000cfa:	68fa      	ldr	r2, [r7, #12]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	d8f7      	bhi.n	8000cf0 <HAL_Delay+0x28>
  {
  }
}
 8000d00:	bf00      	nop
 8000d02:	bf00      	nop
 8000d04:	3710      	adds	r7, #16
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	20000040 	.word	0x20000040

08000d10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b085      	sub	sp, #20
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	f003 0307 	and.w	r3, r3, #7
 8000d1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d20:	4b0c      	ldr	r3, [pc, #48]	; (8000d54 <__NVIC_SetPriorityGrouping+0x44>)
 8000d22:	68db      	ldr	r3, [r3, #12]
 8000d24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d26:	68ba      	ldr	r2, [r7, #8]
 8000d28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d42:	4a04      	ldr	r2, [pc, #16]	; (8000d54 <__NVIC_SetPriorityGrouping+0x44>)
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	60d3      	str	r3, [r2, #12]
}
 8000d48:	bf00      	nop
 8000d4a:	3714      	adds	r7, #20
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr
 8000d54:	e000ed00 	.word	0xe000ed00

08000d58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d5c:	4b04      	ldr	r3, [pc, #16]	; (8000d70 <__NVIC_GetPriorityGrouping+0x18>)
 8000d5e:	68db      	ldr	r3, [r3, #12]
 8000d60:	0a1b      	lsrs	r3, r3, #8
 8000d62:	f003 0307 	and.w	r3, r3, #7
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr
 8000d70:	e000ed00 	.word	0xe000ed00

08000d74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	db0b      	blt.n	8000d9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d86:	79fb      	ldrb	r3, [r7, #7]
 8000d88:	f003 021f 	and.w	r2, r3, #31
 8000d8c:	4907      	ldr	r1, [pc, #28]	; (8000dac <__NVIC_EnableIRQ+0x38>)
 8000d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d92:	095b      	lsrs	r3, r3, #5
 8000d94:	2001      	movs	r0, #1
 8000d96:	fa00 f202 	lsl.w	r2, r0, r2
 8000d9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d9e:	bf00      	nop
 8000da0:	370c      	adds	r7, #12
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	e000e100 	.word	0xe000e100

08000db0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4603      	mov	r3, r0
 8000db8:	6039      	str	r1, [r7, #0]
 8000dba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	db0a      	blt.n	8000dda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	b2da      	uxtb	r2, r3
 8000dc8:	490c      	ldr	r1, [pc, #48]	; (8000dfc <__NVIC_SetPriority+0x4c>)
 8000dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dce:	0112      	lsls	r2, r2, #4
 8000dd0:	b2d2      	uxtb	r2, r2
 8000dd2:	440b      	add	r3, r1
 8000dd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dd8:	e00a      	b.n	8000df0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	b2da      	uxtb	r2, r3
 8000dde:	4908      	ldr	r1, [pc, #32]	; (8000e00 <__NVIC_SetPriority+0x50>)
 8000de0:	79fb      	ldrb	r3, [r7, #7]
 8000de2:	f003 030f 	and.w	r3, r3, #15
 8000de6:	3b04      	subs	r3, #4
 8000de8:	0112      	lsls	r2, r2, #4
 8000dea:	b2d2      	uxtb	r2, r2
 8000dec:	440b      	add	r3, r1
 8000dee:	761a      	strb	r2, [r3, #24]
}
 8000df0:	bf00      	nop
 8000df2:	370c      	adds	r7, #12
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr
 8000dfc:	e000e100 	.word	0xe000e100
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b089      	sub	sp, #36	; 0x24
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	60f8      	str	r0, [r7, #12]
 8000e0c:	60b9      	str	r1, [r7, #8]
 8000e0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	f003 0307 	and.w	r3, r3, #7
 8000e16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e18:	69fb      	ldr	r3, [r7, #28]
 8000e1a:	f1c3 0307 	rsb	r3, r3, #7
 8000e1e:	2b04      	cmp	r3, #4
 8000e20:	bf28      	it	cs
 8000e22:	2304      	movcs	r3, #4
 8000e24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	3304      	adds	r3, #4
 8000e2a:	2b06      	cmp	r3, #6
 8000e2c:	d902      	bls.n	8000e34 <NVIC_EncodePriority+0x30>
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	3b03      	subs	r3, #3
 8000e32:	e000      	b.n	8000e36 <NVIC_EncodePriority+0x32>
 8000e34:	2300      	movs	r3, #0
 8000e36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e38:	f04f 32ff 	mov.w	r2, #4294967295
 8000e3c:	69bb      	ldr	r3, [r7, #24]
 8000e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e42:	43da      	mvns	r2, r3
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	401a      	ands	r2, r3
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	fa01 f303 	lsl.w	r3, r1, r3
 8000e56:	43d9      	mvns	r1, r3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e5c:	4313      	orrs	r3, r2
         );
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3724      	adds	r7, #36	; 0x24
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
	...

08000e6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	3b01      	subs	r3, #1
 8000e78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e7c:	d301      	bcc.n	8000e82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e7e:	2301      	movs	r3, #1
 8000e80:	e00f      	b.n	8000ea2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e82:	4a0a      	ldr	r2, [pc, #40]	; (8000eac <SysTick_Config+0x40>)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	3b01      	subs	r3, #1
 8000e88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e8a:	210f      	movs	r1, #15
 8000e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e90:	f7ff ff8e 	bl	8000db0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e94:	4b05      	ldr	r3, [pc, #20]	; (8000eac <SysTick_Config+0x40>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e9a:	4b04      	ldr	r3, [pc, #16]	; (8000eac <SysTick_Config+0x40>)
 8000e9c:	2207      	movs	r2, #7
 8000e9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ea0:	2300      	movs	r3, #0
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	e000e010 	.word	0xe000e010

08000eb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eb8:	6878      	ldr	r0, [r7, #4]
 8000eba:	f7ff ff29 	bl	8000d10 <__NVIC_SetPriorityGrouping>
}
 8000ebe:	bf00      	nop
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}

08000ec6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	b086      	sub	sp, #24
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	4603      	mov	r3, r0
 8000ece:	60b9      	str	r1, [r7, #8]
 8000ed0:	607a      	str	r2, [r7, #4]
 8000ed2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ed8:	f7ff ff3e 	bl	8000d58 <__NVIC_GetPriorityGrouping>
 8000edc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ede:	687a      	ldr	r2, [r7, #4]
 8000ee0:	68b9      	ldr	r1, [r7, #8]
 8000ee2:	6978      	ldr	r0, [r7, #20]
 8000ee4:	f7ff ff8e 	bl	8000e04 <NVIC_EncodePriority>
 8000ee8:	4602      	mov	r2, r0
 8000eea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eee:	4611      	mov	r1, r2
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f7ff ff5d 	bl	8000db0 <__NVIC_SetPriority>
}
 8000ef6:	bf00      	nop
 8000ef8:	3718      	adds	r7, #24
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}

08000efe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000efe:	b580      	push	{r7, lr}
 8000f00:	b082      	sub	sp, #8
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	4603      	mov	r3, r0
 8000f06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff ff31 	bl	8000d74 <__NVIC_EnableIRQ>
}
 8000f12:	bf00      	nop
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	b082      	sub	sp, #8
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f22:	6878      	ldr	r0, [r7, #4]
 8000f24:	f7ff ffa2 	bl	8000e6c <SysTick_Config>
 8000f28:	4603      	mov	r3, r0
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}

08000f32 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f32:	b580      	push	{r7, lr}
 8000f34:	b084      	sub	sp, #16
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f3e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000f40:	f7ff feb6 	bl	8000cb0 <HAL_GetTick>
 8000f44:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	2b02      	cmp	r3, #2
 8000f50:	d008      	beq.n	8000f64 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2280      	movs	r2, #128	; 0x80
 8000f56:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000f60:	2301      	movs	r3, #1
 8000f62:	e052      	b.n	800100a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f022 0216 	bic.w	r2, r2, #22
 8000f72:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	695a      	ldr	r2, [r3, #20]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f82:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d103      	bne.n	8000f94 <HAL_DMA_Abort+0x62>
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d007      	beq.n	8000fa4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f022 0208 	bic.w	r2, r2, #8
 8000fa2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f022 0201 	bic.w	r2, r2, #1
 8000fb2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fb4:	e013      	b.n	8000fde <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000fb6:	f7ff fe7b 	bl	8000cb0 <HAL_GetTick>
 8000fba:	4602      	mov	r2, r0
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	1ad3      	subs	r3, r2, r3
 8000fc0:	2b05      	cmp	r3, #5
 8000fc2:	d90c      	bls.n	8000fde <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2220      	movs	r2, #32
 8000fc8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2203      	movs	r2, #3
 8000fce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000fda:	2303      	movs	r3, #3
 8000fdc:	e015      	b.n	800100a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f003 0301 	and.w	r3, r3, #1
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d1e4      	bne.n	8000fb6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ff0:	223f      	movs	r2, #63	; 0x3f
 8000ff2:	409a      	lsls	r2, r3
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2200      	movs	r2, #0
 8001004:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001008:	2300      	movs	r3, #0
}
 800100a:	4618      	mov	r0, r3
 800100c:	3710      	adds	r7, #16
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001012:	b480      	push	{r7}
 8001014:	b083      	sub	sp, #12
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001020:	b2db      	uxtb	r3, r3
 8001022:	2b02      	cmp	r3, #2
 8001024:	d004      	beq.n	8001030 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2280      	movs	r2, #128	; 0x80
 800102a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800102c:	2301      	movs	r3, #1
 800102e:	e00c      	b.n	800104a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2205      	movs	r2, #5
 8001034:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f022 0201 	bic.w	r2, r2, #1
 8001046:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001048:	2300      	movs	r3, #0
}
 800104a:	4618      	mov	r0, r3
 800104c:	370c      	adds	r7, #12
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
	...

08001058 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001058:	b480      	push	{r7}
 800105a:	b089      	sub	sp, #36	; 0x24
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001062:	2300      	movs	r3, #0
 8001064:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001066:	2300      	movs	r3, #0
 8001068:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800106a:	2300      	movs	r3, #0
 800106c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800106e:	2300      	movs	r3, #0
 8001070:	61fb      	str	r3, [r7, #28]
 8001072:	e159      	b.n	8001328 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001074:	2201      	movs	r2, #1
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	697a      	ldr	r2, [r7, #20]
 8001084:	4013      	ands	r3, r2
 8001086:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001088:	693a      	ldr	r2, [r7, #16]
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	429a      	cmp	r2, r3
 800108e:	f040 8148 	bne.w	8001322 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f003 0303 	and.w	r3, r3, #3
 800109a:	2b01      	cmp	r3, #1
 800109c:	d005      	beq.n	80010aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	d130      	bne.n	800110c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	689b      	ldr	r3, [r3, #8]
 80010ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	2203      	movs	r2, #3
 80010b6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ba:	43db      	mvns	r3, r3
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	4013      	ands	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	68da      	ldr	r2, [r3, #12]
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	005b      	lsls	r3, r3, #1
 80010ca:	fa02 f303 	lsl.w	r3, r2, r3
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	4313      	orrs	r3, r2
 80010d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010e0:	2201      	movs	r2, #1
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	43db      	mvns	r3, r3
 80010ea:	69ba      	ldr	r2, [r7, #24]
 80010ec:	4013      	ands	r3, r2
 80010ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	091b      	lsrs	r3, r3, #4
 80010f6:	f003 0201 	and.w	r2, r3, #1
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	4313      	orrs	r3, r2
 8001104:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f003 0303 	and.w	r3, r3, #3
 8001114:	2b03      	cmp	r3, #3
 8001116:	d017      	beq.n	8001148 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	2203      	movs	r2, #3
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	43db      	mvns	r3, r3
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	4013      	ands	r3, r2
 800112e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	689a      	ldr	r2, [r3, #8]
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	4313      	orrs	r3, r2
 8001140:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f003 0303 	and.w	r3, r3, #3
 8001150:	2b02      	cmp	r3, #2
 8001152:	d123      	bne.n	800119c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	08da      	lsrs	r2, r3, #3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	3208      	adds	r2, #8
 800115c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001160:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	f003 0307 	and.w	r3, r3, #7
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	220f      	movs	r2, #15
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	43db      	mvns	r3, r3
 8001172:	69ba      	ldr	r2, [r7, #24]
 8001174:	4013      	ands	r3, r2
 8001176:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	691a      	ldr	r2, [r3, #16]
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	f003 0307 	and.w	r3, r3, #7
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	4313      	orrs	r3, r2
 800118c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	08da      	lsrs	r2, r3, #3
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	3208      	adds	r2, #8
 8001196:	69b9      	ldr	r1, [r7, #24]
 8001198:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	005b      	lsls	r3, r3, #1
 80011a6:	2203      	movs	r2, #3
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	43db      	mvns	r3, r3
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	4013      	ands	r3, r2
 80011b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f003 0203 	and.w	r2, r3, #3
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	005b      	lsls	r3, r3, #1
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011d8:	2b00      	cmp	r3, #0
 80011da:	f000 80a2 	beq.w	8001322 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	60fb      	str	r3, [r7, #12]
 80011e2:	4b57      	ldr	r3, [pc, #348]	; (8001340 <HAL_GPIO_Init+0x2e8>)
 80011e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e6:	4a56      	ldr	r2, [pc, #344]	; (8001340 <HAL_GPIO_Init+0x2e8>)
 80011e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011ec:	6453      	str	r3, [r2, #68]	; 0x44
 80011ee:	4b54      	ldr	r3, [pc, #336]	; (8001340 <HAL_GPIO_Init+0x2e8>)
 80011f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011f6:	60fb      	str	r3, [r7, #12]
 80011f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011fa:	4a52      	ldr	r2, [pc, #328]	; (8001344 <HAL_GPIO_Init+0x2ec>)
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	089b      	lsrs	r3, r3, #2
 8001200:	3302      	adds	r3, #2
 8001202:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001206:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	f003 0303 	and.w	r3, r3, #3
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	220f      	movs	r2, #15
 8001212:	fa02 f303 	lsl.w	r3, r2, r3
 8001216:	43db      	mvns	r3, r3
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	4013      	ands	r3, r2
 800121c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a49      	ldr	r2, [pc, #292]	; (8001348 <HAL_GPIO_Init+0x2f0>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d019      	beq.n	800125a <HAL_GPIO_Init+0x202>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a48      	ldr	r2, [pc, #288]	; (800134c <HAL_GPIO_Init+0x2f4>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d013      	beq.n	8001256 <HAL_GPIO_Init+0x1fe>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a47      	ldr	r2, [pc, #284]	; (8001350 <HAL_GPIO_Init+0x2f8>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d00d      	beq.n	8001252 <HAL_GPIO_Init+0x1fa>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a46      	ldr	r2, [pc, #280]	; (8001354 <HAL_GPIO_Init+0x2fc>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d007      	beq.n	800124e <HAL_GPIO_Init+0x1f6>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a45      	ldr	r2, [pc, #276]	; (8001358 <HAL_GPIO_Init+0x300>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d101      	bne.n	800124a <HAL_GPIO_Init+0x1f2>
 8001246:	2304      	movs	r3, #4
 8001248:	e008      	b.n	800125c <HAL_GPIO_Init+0x204>
 800124a:	2307      	movs	r3, #7
 800124c:	e006      	b.n	800125c <HAL_GPIO_Init+0x204>
 800124e:	2303      	movs	r3, #3
 8001250:	e004      	b.n	800125c <HAL_GPIO_Init+0x204>
 8001252:	2302      	movs	r3, #2
 8001254:	e002      	b.n	800125c <HAL_GPIO_Init+0x204>
 8001256:	2301      	movs	r3, #1
 8001258:	e000      	b.n	800125c <HAL_GPIO_Init+0x204>
 800125a:	2300      	movs	r3, #0
 800125c:	69fa      	ldr	r2, [r7, #28]
 800125e:	f002 0203 	and.w	r2, r2, #3
 8001262:	0092      	lsls	r2, r2, #2
 8001264:	4093      	lsls	r3, r2
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	4313      	orrs	r3, r2
 800126a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800126c:	4935      	ldr	r1, [pc, #212]	; (8001344 <HAL_GPIO_Init+0x2ec>)
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	089b      	lsrs	r3, r3, #2
 8001272:	3302      	adds	r3, #2
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800127a:	4b38      	ldr	r3, [pc, #224]	; (800135c <HAL_GPIO_Init+0x304>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	43db      	mvns	r3, r3
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	4013      	ands	r3, r2
 8001288:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001292:	2b00      	cmp	r3, #0
 8001294:	d003      	beq.n	800129e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	4313      	orrs	r3, r2
 800129c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800129e:	4a2f      	ldr	r2, [pc, #188]	; (800135c <HAL_GPIO_Init+0x304>)
 80012a0:	69bb      	ldr	r3, [r7, #24]
 80012a2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80012a4:	4b2d      	ldr	r3, [pc, #180]	; (800135c <HAL_GPIO_Init+0x304>)
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	43db      	mvns	r3, r3
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	4013      	ands	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d003      	beq.n	80012c8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012c8:	4a24      	ldr	r2, [pc, #144]	; (800135c <HAL_GPIO_Init+0x304>)
 80012ca:	69bb      	ldr	r3, [r7, #24]
 80012cc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012ce:	4b23      	ldr	r3, [pc, #140]	; (800135c <HAL_GPIO_Init+0x304>)
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	43db      	mvns	r3, r3
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	4013      	ands	r3, r2
 80012dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d003      	beq.n	80012f2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012f2:	4a1a      	ldr	r2, [pc, #104]	; (800135c <HAL_GPIO_Init+0x304>)
 80012f4:	69bb      	ldr	r3, [r7, #24]
 80012f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012f8:	4b18      	ldr	r3, [pc, #96]	; (800135c <HAL_GPIO_Init+0x304>)
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	43db      	mvns	r3, r3
 8001302:	69ba      	ldr	r2, [r7, #24]
 8001304:	4013      	ands	r3, r2
 8001306:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001310:	2b00      	cmp	r3, #0
 8001312:	d003      	beq.n	800131c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	4313      	orrs	r3, r2
 800131a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800131c:	4a0f      	ldr	r2, [pc, #60]	; (800135c <HAL_GPIO_Init+0x304>)
 800131e:	69bb      	ldr	r3, [r7, #24]
 8001320:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	3301      	adds	r3, #1
 8001326:	61fb      	str	r3, [r7, #28]
 8001328:	69fb      	ldr	r3, [r7, #28]
 800132a:	2b0f      	cmp	r3, #15
 800132c:	f67f aea2 	bls.w	8001074 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001330:	bf00      	nop
 8001332:	bf00      	nop
 8001334:	3724      	adds	r7, #36	; 0x24
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	40023800 	.word	0x40023800
 8001344:	40013800 	.word	0x40013800
 8001348:	40020000 	.word	0x40020000
 800134c:	40020400 	.word	0x40020400
 8001350:	40020800 	.word	0x40020800
 8001354:	40020c00 	.word	0x40020c00
 8001358:	40021000 	.word	0x40021000
 800135c:	40013c00 	.word	0x40013c00

08001360 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001360:	b480      	push	{r7}
 8001362:	b085      	sub	sp, #20
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	460b      	mov	r3, r1
 800136a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	691a      	ldr	r2, [r3, #16]
 8001370:	887b      	ldrh	r3, [r7, #2]
 8001372:	4013      	ands	r3, r2
 8001374:	2b00      	cmp	r3, #0
 8001376:	d002      	beq.n	800137e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001378:	2301      	movs	r3, #1
 800137a:	73fb      	strb	r3, [r7, #15]
 800137c:	e001      	b.n	8001382 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800137e:	2300      	movs	r3, #0
 8001380:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001382:	7bfb      	ldrb	r3, [r7, #15]
}
 8001384:	4618      	mov	r0, r3
 8001386:	3714      	adds	r7, #20
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr

08001390 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	460b      	mov	r3, r1
 800139a:	807b      	strh	r3, [r7, #2]
 800139c:	4613      	mov	r3, r2
 800139e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013a0:	787b      	ldrb	r3, [r7, #1]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d003      	beq.n	80013ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013a6:	887a      	ldrh	r2, [r7, #2]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013ac:	e003      	b.n	80013b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013ae:	887b      	ldrh	r3, [r7, #2]
 80013b0:	041a      	lsls	r2, r3, #16
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	619a      	str	r2, [r3, #24]
}
 80013b6:	bf00      	nop
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
	...

080013c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	4603      	mov	r3, r0
 80013cc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80013ce:	4b08      	ldr	r3, [pc, #32]	; (80013f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013d0:	695a      	ldr	r2, [r3, #20]
 80013d2:	88fb      	ldrh	r3, [r7, #6]
 80013d4:	4013      	ands	r3, r2
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d006      	beq.n	80013e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80013da:	4a05      	ldr	r2, [pc, #20]	; (80013f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013dc:	88fb      	ldrh	r3, [r7, #6]
 80013de:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80013e0:	88fb      	ldrh	r3, [r7, #6]
 80013e2:	4618      	mov	r0, r3
 80013e4:	f000 f806 	bl	80013f4 <HAL_GPIO_EXTI_Callback>
  }
}
 80013e8:	bf00      	nop
 80013ea:	3708      	adds	r7, #8
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	40013c00 	.word	0x40013c00

080013f4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	4603      	mov	r3, r0
 80013fc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80013fe:	bf00      	nop
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
	...

0800140c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b086      	sub	sp, #24
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d101      	bne.n	800141e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e264      	b.n	80018e8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 0301 	and.w	r3, r3, #1
 8001426:	2b00      	cmp	r3, #0
 8001428:	d075      	beq.n	8001516 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800142a:	4ba3      	ldr	r3, [pc, #652]	; (80016b8 <HAL_RCC_OscConfig+0x2ac>)
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	f003 030c 	and.w	r3, r3, #12
 8001432:	2b04      	cmp	r3, #4
 8001434:	d00c      	beq.n	8001450 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001436:	4ba0      	ldr	r3, [pc, #640]	; (80016b8 <HAL_RCC_OscConfig+0x2ac>)
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800143e:	2b08      	cmp	r3, #8
 8001440:	d112      	bne.n	8001468 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001442:	4b9d      	ldr	r3, [pc, #628]	; (80016b8 <HAL_RCC_OscConfig+0x2ac>)
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800144a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800144e:	d10b      	bne.n	8001468 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001450:	4b99      	ldr	r3, [pc, #612]	; (80016b8 <HAL_RCC_OscConfig+0x2ac>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001458:	2b00      	cmp	r3, #0
 800145a:	d05b      	beq.n	8001514 <HAL_RCC_OscConfig+0x108>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d157      	bne.n	8001514 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	e23f      	b.n	80018e8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001470:	d106      	bne.n	8001480 <HAL_RCC_OscConfig+0x74>
 8001472:	4b91      	ldr	r3, [pc, #580]	; (80016b8 <HAL_RCC_OscConfig+0x2ac>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a90      	ldr	r2, [pc, #576]	; (80016b8 <HAL_RCC_OscConfig+0x2ac>)
 8001478:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800147c:	6013      	str	r3, [r2, #0]
 800147e:	e01d      	b.n	80014bc <HAL_RCC_OscConfig+0xb0>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001488:	d10c      	bne.n	80014a4 <HAL_RCC_OscConfig+0x98>
 800148a:	4b8b      	ldr	r3, [pc, #556]	; (80016b8 <HAL_RCC_OscConfig+0x2ac>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a8a      	ldr	r2, [pc, #552]	; (80016b8 <HAL_RCC_OscConfig+0x2ac>)
 8001490:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001494:	6013      	str	r3, [r2, #0]
 8001496:	4b88      	ldr	r3, [pc, #544]	; (80016b8 <HAL_RCC_OscConfig+0x2ac>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a87      	ldr	r2, [pc, #540]	; (80016b8 <HAL_RCC_OscConfig+0x2ac>)
 800149c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014a0:	6013      	str	r3, [r2, #0]
 80014a2:	e00b      	b.n	80014bc <HAL_RCC_OscConfig+0xb0>
 80014a4:	4b84      	ldr	r3, [pc, #528]	; (80016b8 <HAL_RCC_OscConfig+0x2ac>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a83      	ldr	r2, [pc, #524]	; (80016b8 <HAL_RCC_OscConfig+0x2ac>)
 80014aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014ae:	6013      	str	r3, [r2, #0]
 80014b0:	4b81      	ldr	r3, [pc, #516]	; (80016b8 <HAL_RCC_OscConfig+0x2ac>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a80      	ldr	r2, [pc, #512]	; (80016b8 <HAL_RCC_OscConfig+0x2ac>)
 80014b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d013      	beq.n	80014ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014c4:	f7ff fbf4 	bl	8000cb0 <HAL_GetTick>
 80014c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ca:	e008      	b.n	80014de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014cc:	f7ff fbf0 	bl	8000cb0 <HAL_GetTick>
 80014d0:	4602      	mov	r2, r0
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	2b64      	cmp	r3, #100	; 0x64
 80014d8:	d901      	bls.n	80014de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80014da:	2303      	movs	r3, #3
 80014dc:	e204      	b.n	80018e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014de:	4b76      	ldr	r3, [pc, #472]	; (80016b8 <HAL_RCC_OscConfig+0x2ac>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d0f0      	beq.n	80014cc <HAL_RCC_OscConfig+0xc0>
 80014ea:	e014      	b.n	8001516 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ec:	f7ff fbe0 	bl	8000cb0 <HAL_GetTick>
 80014f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014f2:	e008      	b.n	8001506 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014f4:	f7ff fbdc 	bl	8000cb0 <HAL_GetTick>
 80014f8:	4602      	mov	r2, r0
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	2b64      	cmp	r3, #100	; 0x64
 8001500:	d901      	bls.n	8001506 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	e1f0      	b.n	80018e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001506:	4b6c      	ldr	r3, [pc, #432]	; (80016b8 <HAL_RCC_OscConfig+0x2ac>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800150e:	2b00      	cmp	r3, #0
 8001510:	d1f0      	bne.n	80014f4 <HAL_RCC_OscConfig+0xe8>
 8001512:	e000      	b.n	8001516 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001514:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 0302 	and.w	r3, r3, #2
 800151e:	2b00      	cmp	r3, #0
 8001520:	d063      	beq.n	80015ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001522:	4b65      	ldr	r3, [pc, #404]	; (80016b8 <HAL_RCC_OscConfig+0x2ac>)
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	f003 030c 	and.w	r3, r3, #12
 800152a:	2b00      	cmp	r3, #0
 800152c:	d00b      	beq.n	8001546 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800152e:	4b62      	ldr	r3, [pc, #392]	; (80016b8 <HAL_RCC_OscConfig+0x2ac>)
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001536:	2b08      	cmp	r3, #8
 8001538:	d11c      	bne.n	8001574 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800153a:	4b5f      	ldr	r3, [pc, #380]	; (80016b8 <HAL_RCC_OscConfig+0x2ac>)
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d116      	bne.n	8001574 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001546:	4b5c      	ldr	r3, [pc, #368]	; (80016b8 <HAL_RCC_OscConfig+0x2ac>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	2b00      	cmp	r3, #0
 8001550:	d005      	beq.n	800155e <HAL_RCC_OscConfig+0x152>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	68db      	ldr	r3, [r3, #12]
 8001556:	2b01      	cmp	r3, #1
 8001558:	d001      	beq.n	800155e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e1c4      	b.n	80018e8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800155e:	4b56      	ldr	r3, [pc, #344]	; (80016b8 <HAL_RCC_OscConfig+0x2ac>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	691b      	ldr	r3, [r3, #16]
 800156a:	00db      	lsls	r3, r3, #3
 800156c:	4952      	ldr	r1, [pc, #328]	; (80016b8 <HAL_RCC_OscConfig+0x2ac>)
 800156e:	4313      	orrs	r3, r2
 8001570:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001572:	e03a      	b.n	80015ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d020      	beq.n	80015be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800157c:	4b4f      	ldr	r3, [pc, #316]	; (80016bc <HAL_RCC_OscConfig+0x2b0>)
 800157e:	2201      	movs	r2, #1
 8001580:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001582:	f7ff fb95 	bl	8000cb0 <HAL_GetTick>
 8001586:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001588:	e008      	b.n	800159c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800158a:	f7ff fb91 	bl	8000cb0 <HAL_GetTick>
 800158e:	4602      	mov	r2, r0
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	2b02      	cmp	r3, #2
 8001596:	d901      	bls.n	800159c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001598:	2303      	movs	r3, #3
 800159a:	e1a5      	b.n	80018e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800159c:	4b46      	ldr	r3, [pc, #280]	; (80016b8 <HAL_RCC_OscConfig+0x2ac>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 0302 	and.w	r3, r3, #2
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d0f0      	beq.n	800158a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015a8:	4b43      	ldr	r3, [pc, #268]	; (80016b8 <HAL_RCC_OscConfig+0x2ac>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	691b      	ldr	r3, [r3, #16]
 80015b4:	00db      	lsls	r3, r3, #3
 80015b6:	4940      	ldr	r1, [pc, #256]	; (80016b8 <HAL_RCC_OscConfig+0x2ac>)
 80015b8:	4313      	orrs	r3, r2
 80015ba:	600b      	str	r3, [r1, #0]
 80015bc:	e015      	b.n	80015ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015be:	4b3f      	ldr	r3, [pc, #252]	; (80016bc <HAL_RCC_OscConfig+0x2b0>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015c4:	f7ff fb74 	bl	8000cb0 <HAL_GetTick>
 80015c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015ca:	e008      	b.n	80015de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015cc:	f7ff fb70 	bl	8000cb0 <HAL_GetTick>
 80015d0:	4602      	mov	r2, r0
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d901      	bls.n	80015de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80015da:	2303      	movs	r3, #3
 80015dc:	e184      	b.n	80018e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015de:	4b36      	ldr	r3, [pc, #216]	; (80016b8 <HAL_RCC_OscConfig+0x2ac>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0302 	and.w	r3, r3, #2
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d1f0      	bne.n	80015cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 0308 	and.w	r3, r3, #8
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d030      	beq.n	8001658 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	695b      	ldr	r3, [r3, #20]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d016      	beq.n	800162c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015fe:	4b30      	ldr	r3, [pc, #192]	; (80016c0 <HAL_RCC_OscConfig+0x2b4>)
 8001600:	2201      	movs	r2, #1
 8001602:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001604:	f7ff fb54 	bl	8000cb0 <HAL_GetTick>
 8001608:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800160a:	e008      	b.n	800161e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800160c:	f7ff fb50 	bl	8000cb0 <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	2b02      	cmp	r3, #2
 8001618:	d901      	bls.n	800161e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800161a:	2303      	movs	r3, #3
 800161c:	e164      	b.n	80018e8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800161e:	4b26      	ldr	r3, [pc, #152]	; (80016b8 <HAL_RCC_OscConfig+0x2ac>)
 8001620:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001622:	f003 0302 	and.w	r3, r3, #2
 8001626:	2b00      	cmp	r3, #0
 8001628:	d0f0      	beq.n	800160c <HAL_RCC_OscConfig+0x200>
 800162a:	e015      	b.n	8001658 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800162c:	4b24      	ldr	r3, [pc, #144]	; (80016c0 <HAL_RCC_OscConfig+0x2b4>)
 800162e:	2200      	movs	r2, #0
 8001630:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001632:	f7ff fb3d 	bl	8000cb0 <HAL_GetTick>
 8001636:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001638:	e008      	b.n	800164c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800163a:	f7ff fb39 	bl	8000cb0 <HAL_GetTick>
 800163e:	4602      	mov	r2, r0
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	1ad3      	subs	r3, r2, r3
 8001644:	2b02      	cmp	r3, #2
 8001646:	d901      	bls.n	800164c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001648:	2303      	movs	r3, #3
 800164a:	e14d      	b.n	80018e8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800164c:	4b1a      	ldr	r3, [pc, #104]	; (80016b8 <HAL_RCC_OscConfig+0x2ac>)
 800164e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001650:	f003 0302 	and.w	r3, r3, #2
 8001654:	2b00      	cmp	r3, #0
 8001656:	d1f0      	bne.n	800163a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 0304 	and.w	r3, r3, #4
 8001660:	2b00      	cmp	r3, #0
 8001662:	f000 80a0 	beq.w	80017a6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001666:	2300      	movs	r3, #0
 8001668:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800166a:	4b13      	ldr	r3, [pc, #76]	; (80016b8 <HAL_RCC_OscConfig+0x2ac>)
 800166c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d10f      	bne.n	8001696 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001676:	2300      	movs	r3, #0
 8001678:	60bb      	str	r3, [r7, #8]
 800167a:	4b0f      	ldr	r3, [pc, #60]	; (80016b8 <HAL_RCC_OscConfig+0x2ac>)
 800167c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167e:	4a0e      	ldr	r2, [pc, #56]	; (80016b8 <HAL_RCC_OscConfig+0x2ac>)
 8001680:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001684:	6413      	str	r3, [r2, #64]	; 0x40
 8001686:	4b0c      	ldr	r3, [pc, #48]	; (80016b8 <HAL_RCC_OscConfig+0x2ac>)
 8001688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800168e:	60bb      	str	r3, [r7, #8]
 8001690:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001692:	2301      	movs	r3, #1
 8001694:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001696:	4b0b      	ldr	r3, [pc, #44]	; (80016c4 <HAL_RCC_OscConfig+0x2b8>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d121      	bne.n	80016e6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016a2:	4b08      	ldr	r3, [pc, #32]	; (80016c4 <HAL_RCC_OscConfig+0x2b8>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a07      	ldr	r2, [pc, #28]	; (80016c4 <HAL_RCC_OscConfig+0x2b8>)
 80016a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016ae:	f7ff faff 	bl	8000cb0 <HAL_GetTick>
 80016b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016b4:	e011      	b.n	80016da <HAL_RCC_OscConfig+0x2ce>
 80016b6:	bf00      	nop
 80016b8:	40023800 	.word	0x40023800
 80016bc:	42470000 	.word	0x42470000
 80016c0:	42470e80 	.word	0x42470e80
 80016c4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016c8:	f7ff faf2 	bl	8000cb0 <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	d901      	bls.n	80016da <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80016d6:	2303      	movs	r3, #3
 80016d8:	e106      	b.n	80018e8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016da:	4b85      	ldr	r3, [pc, #532]	; (80018f0 <HAL_RCC_OscConfig+0x4e4>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d0f0      	beq.n	80016c8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d106      	bne.n	80016fc <HAL_RCC_OscConfig+0x2f0>
 80016ee:	4b81      	ldr	r3, [pc, #516]	; (80018f4 <HAL_RCC_OscConfig+0x4e8>)
 80016f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016f2:	4a80      	ldr	r2, [pc, #512]	; (80018f4 <HAL_RCC_OscConfig+0x4e8>)
 80016f4:	f043 0301 	orr.w	r3, r3, #1
 80016f8:	6713      	str	r3, [r2, #112]	; 0x70
 80016fa:	e01c      	b.n	8001736 <HAL_RCC_OscConfig+0x32a>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	2b05      	cmp	r3, #5
 8001702:	d10c      	bne.n	800171e <HAL_RCC_OscConfig+0x312>
 8001704:	4b7b      	ldr	r3, [pc, #492]	; (80018f4 <HAL_RCC_OscConfig+0x4e8>)
 8001706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001708:	4a7a      	ldr	r2, [pc, #488]	; (80018f4 <HAL_RCC_OscConfig+0x4e8>)
 800170a:	f043 0304 	orr.w	r3, r3, #4
 800170e:	6713      	str	r3, [r2, #112]	; 0x70
 8001710:	4b78      	ldr	r3, [pc, #480]	; (80018f4 <HAL_RCC_OscConfig+0x4e8>)
 8001712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001714:	4a77      	ldr	r2, [pc, #476]	; (80018f4 <HAL_RCC_OscConfig+0x4e8>)
 8001716:	f043 0301 	orr.w	r3, r3, #1
 800171a:	6713      	str	r3, [r2, #112]	; 0x70
 800171c:	e00b      	b.n	8001736 <HAL_RCC_OscConfig+0x32a>
 800171e:	4b75      	ldr	r3, [pc, #468]	; (80018f4 <HAL_RCC_OscConfig+0x4e8>)
 8001720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001722:	4a74      	ldr	r2, [pc, #464]	; (80018f4 <HAL_RCC_OscConfig+0x4e8>)
 8001724:	f023 0301 	bic.w	r3, r3, #1
 8001728:	6713      	str	r3, [r2, #112]	; 0x70
 800172a:	4b72      	ldr	r3, [pc, #456]	; (80018f4 <HAL_RCC_OscConfig+0x4e8>)
 800172c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800172e:	4a71      	ldr	r2, [pc, #452]	; (80018f4 <HAL_RCC_OscConfig+0x4e8>)
 8001730:	f023 0304 	bic.w	r3, r3, #4
 8001734:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d015      	beq.n	800176a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800173e:	f7ff fab7 	bl	8000cb0 <HAL_GetTick>
 8001742:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001744:	e00a      	b.n	800175c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001746:	f7ff fab3 	bl	8000cb0 <HAL_GetTick>
 800174a:	4602      	mov	r2, r0
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	f241 3288 	movw	r2, #5000	; 0x1388
 8001754:	4293      	cmp	r3, r2
 8001756:	d901      	bls.n	800175c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e0c5      	b.n	80018e8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800175c:	4b65      	ldr	r3, [pc, #404]	; (80018f4 <HAL_RCC_OscConfig+0x4e8>)
 800175e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001760:	f003 0302 	and.w	r3, r3, #2
 8001764:	2b00      	cmp	r3, #0
 8001766:	d0ee      	beq.n	8001746 <HAL_RCC_OscConfig+0x33a>
 8001768:	e014      	b.n	8001794 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800176a:	f7ff faa1 	bl	8000cb0 <HAL_GetTick>
 800176e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001770:	e00a      	b.n	8001788 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001772:	f7ff fa9d 	bl	8000cb0 <HAL_GetTick>
 8001776:	4602      	mov	r2, r0
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001780:	4293      	cmp	r3, r2
 8001782:	d901      	bls.n	8001788 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001784:	2303      	movs	r3, #3
 8001786:	e0af      	b.n	80018e8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001788:	4b5a      	ldr	r3, [pc, #360]	; (80018f4 <HAL_RCC_OscConfig+0x4e8>)
 800178a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800178c:	f003 0302 	and.w	r3, r3, #2
 8001790:	2b00      	cmp	r3, #0
 8001792:	d1ee      	bne.n	8001772 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001794:	7dfb      	ldrb	r3, [r7, #23]
 8001796:	2b01      	cmp	r3, #1
 8001798:	d105      	bne.n	80017a6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800179a:	4b56      	ldr	r3, [pc, #344]	; (80018f4 <HAL_RCC_OscConfig+0x4e8>)
 800179c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179e:	4a55      	ldr	r2, [pc, #340]	; (80018f4 <HAL_RCC_OscConfig+0x4e8>)
 80017a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017a4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	699b      	ldr	r3, [r3, #24]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	f000 809b 	beq.w	80018e6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017b0:	4b50      	ldr	r3, [pc, #320]	; (80018f4 <HAL_RCC_OscConfig+0x4e8>)
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	f003 030c 	and.w	r3, r3, #12
 80017b8:	2b08      	cmp	r3, #8
 80017ba:	d05c      	beq.n	8001876 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	699b      	ldr	r3, [r3, #24]
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	d141      	bne.n	8001848 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017c4:	4b4c      	ldr	r3, [pc, #304]	; (80018f8 <HAL_RCC_OscConfig+0x4ec>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ca:	f7ff fa71 	bl	8000cb0 <HAL_GetTick>
 80017ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017d0:	e008      	b.n	80017e4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017d2:	f7ff fa6d 	bl	8000cb0 <HAL_GetTick>
 80017d6:	4602      	mov	r2, r0
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d901      	bls.n	80017e4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80017e0:	2303      	movs	r3, #3
 80017e2:	e081      	b.n	80018e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017e4:	4b43      	ldr	r3, [pc, #268]	; (80018f4 <HAL_RCC_OscConfig+0x4e8>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d1f0      	bne.n	80017d2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	69da      	ldr	r2, [r3, #28]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6a1b      	ldr	r3, [r3, #32]
 80017f8:	431a      	orrs	r2, r3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017fe:	019b      	lsls	r3, r3, #6
 8001800:	431a      	orrs	r2, r3
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001806:	085b      	lsrs	r3, r3, #1
 8001808:	3b01      	subs	r3, #1
 800180a:	041b      	lsls	r3, r3, #16
 800180c:	431a      	orrs	r2, r3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001812:	061b      	lsls	r3, r3, #24
 8001814:	4937      	ldr	r1, [pc, #220]	; (80018f4 <HAL_RCC_OscConfig+0x4e8>)
 8001816:	4313      	orrs	r3, r2
 8001818:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800181a:	4b37      	ldr	r3, [pc, #220]	; (80018f8 <HAL_RCC_OscConfig+0x4ec>)
 800181c:	2201      	movs	r2, #1
 800181e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001820:	f7ff fa46 	bl	8000cb0 <HAL_GetTick>
 8001824:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001826:	e008      	b.n	800183a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001828:	f7ff fa42 	bl	8000cb0 <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	2b02      	cmp	r3, #2
 8001834:	d901      	bls.n	800183a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e056      	b.n	80018e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800183a:	4b2e      	ldr	r3, [pc, #184]	; (80018f4 <HAL_RCC_OscConfig+0x4e8>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d0f0      	beq.n	8001828 <HAL_RCC_OscConfig+0x41c>
 8001846:	e04e      	b.n	80018e6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001848:	4b2b      	ldr	r3, [pc, #172]	; (80018f8 <HAL_RCC_OscConfig+0x4ec>)
 800184a:	2200      	movs	r2, #0
 800184c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800184e:	f7ff fa2f 	bl	8000cb0 <HAL_GetTick>
 8001852:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001854:	e008      	b.n	8001868 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001856:	f7ff fa2b 	bl	8000cb0 <HAL_GetTick>
 800185a:	4602      	mov	r2, r0
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	2b02      	cmp	r3, #2
 8001862:	d901      	bls.n	8001868 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001864:	2303      	movs	r3, #3
 8001866:	e03f      	b.n	80018e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001868:	4b22      	ldr	r3, [pc, #136]	; (80018f4 <HAL_RCC_OscConfig+0x4e8>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001870:	2b00      	cmp	r3, #0
 8001872:	d1f0      	bne.n	8001856 <HAL_RCC_OscConfig+0x44a>
 8001874:	e037      	b.n	80018e6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	699b      	ldr	r3, [r3, #24]
 800187a:	2b01      	cmp	r3, #1
 800187c:	d101      	bne.n	8001882 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e032      	b.n	80018e8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001882:	4b1c      	ldr	r3, [pc, #112]	; (80018f4 <HAL_RCC_OscConfig+0x4e8>)
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	699b      	ldr	r3, [r3, #24]
 800188c:	2b01      	cmp	r3, #1
 800188e:	d028      	beq.n	80018e2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800189a:	429a      	cmp	r2, r3
 800189c:	d121      	bne.n	80018e2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d11a      	bne.n	80018e2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018ac:	68fa      	ldr	r2, [r7, #12]
 80018ae:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80018b2:	4013      	ands	r3, r2
 80018b4:	687a      	ldr	r2, [r7, #4]
 80018b6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80018b8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d111      	bne.n	80018e2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c8:	085b      	lsrs	r3, r3, #1
 80018ca:	3b01      	subs	r3, #1
 80018cc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d107      	bne.n	80018e2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018dc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018de:	429a      	cmp	r2, r3
 80018e0:	d001      	beq.n	80018e6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e000      	b.n	80018e8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80018e6:	2300      	movs	r3, #0
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3718      	adds	r7, #24
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	40007000 	.word	0x40007000
 80018f4:	40023800 	.word	0x40023800
 80018f8:	42470060 	.word	0x42470060

080018fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d101      	bne.n	8001910 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	e0cc      	b.n	8001aaa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001910:	4b68      	ldr	r3, [pc, #416]	; (8001ab4 <HAL_RCC_ClockConfig+0x1b8>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 0307 	and.w	r3, r3, #7
 8001918:	683a      	ldr	r2, [r7, #0]
 800191a:	429a      	cmp	r2, r3
 800191c:	d90c      	bls.n	8001938 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800191e:	4b65      	ldr	r3, [pc, #404]	; (8001ab4 <HAL_RCC_ClockConfig+0x1b8>)
 8001920:	683a      	ldr	r2, [r7, #0]
 8001922:	b2d2      	uxtb	r2, r2
 8001924:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001926:	4b63      	ldr	r3, [pc, #396]	; (8001ab4 <HAL_RCC_ClockConfig+0x1b8>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0307 	and.w	r3, r3, #7
 800192e:	683a      	ldr	r2, [r7, #0]
 8001930:	429a      	cmp	r2, r3
 8001932:	d001      	beq.n	8001938 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e0b8      	b.n	8001aaa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0302 	and.w	r3, r3, #2
 8001940:	2b00      	cmp	r3, #0
 8001942:	d020      	beq.n	8001986 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 0304 	and.w	r3, r3, #4
 800194c:	2b00      	cmp	r3, #0
 800194e:	d005      	beq.n	800195c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001950:	4b59      	ldr	r3, [pc, #356]	; (8001ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	4a58      	ldr	r2, [pc, #352]	; (8001ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8001956:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800195a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 0308 	and.w	r3, r3, #8
 8001964:	2b00      	cmp	r3, #0
 8001966:	d005      	beq.n	8001974 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001968:	4b53      	ldr	r3, [pc, #332]	; (8001ab8 <HAL_RCC_ClockConfig+0x1bc>)
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	4a52      	ldr	r2, [pc, #328]	; (8001ab8 <HAL_RCC_ClockConfig+0x1bc>)
 800196e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001972:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001974:	4b50      	ldr	r3, [pc, #320]	; (8001ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	494d      	ldr	r1, [pc, #308]	; (8001ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8001982:	4313      	orrs	r3, r2
 8001984:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0301 	and.w	r3, r3, #1
 800198e:	2b00      	cmp	r3, #0
 8001990:	d044      	beq.n	8001a1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	2b01      	cmp	r3, #1
 8001998:	d107      	bne.n	80019aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800199a:	4b47      	ldr	r3, [pc, #284]	; (8001ab8 <HAL_RCC_ClockConfig+0x1bc>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d119      	bne.n	80019da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e07f      	b.n	8001aaa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d003      	beq.n	80019ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019b6:	2b03      	cmp	r3, #3
 80019b8:	d107      	bne.n	80019ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019ba:	4b3f      	ldr	r3, [pc, #252]	; (8001ab8 <HAL_RCC_ClockConfig+0x1bc>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d109      	bne.n	80019da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e06f      	b.n	8001aaa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019ca:	4b3b      	ldr	r3, [pc, #236]	; (8001ab8 <HAL_RCC_ClockConfig+0x1bc>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0302 	and.w	r3, r3, #2
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d101      	bne.n	80019da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e067      	b.n	8001aaa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019da:	4b37      	ldr	r3, [pc, #220]	; (8001ab8 <HAL_RCC_ClockConfig+0x1bc>)
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	f023 0203 	bic.w	r2, r3, #3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	4934      	ldr	r1, [pc, #208]	; (8001ab8 <HAL_RCC_ClockConfig+0x1bc>)
 80019e8:	4313      	orrs	r3, r2
 80019ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019ec:	f7ff f960 	bl	8000cb0 <HAL_GetTick>
 80019f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019f2:	e00a      	b.n	8001a0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019f4:	f7ff f95c 	bl	8000cb0 <HAL_GetTick>
 80019f8:	4602      	mov	r2, r0
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d901      	bls.n	8001a0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e04f      	b.n	8001aaa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a0a:	4b2b      	ldr	r3, [pc, #172]	; (8001ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	f003 020c 	and.w	r2, r3, #12
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d1eb      	bne.n	80019f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a1c:	4b25      	ldr	r3, [pc, #148]	; (8001ab4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 0307 	and.w	r3, r3, #7
 8001a24:	683a      	ldr	r2, [r7, #0]
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d20c      	bcs.n	8001a44 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a2a:	4b22      	ldr	r3, [pc, #136]	; (8001ab4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a2c:	683a      	ldr	r2, [r7, #0]
 8001a2e:	b2d2      	uxtb	r2, r2
 8001a30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a32:	4b20      	ldr	r3, [pc, #128]	; (8001ab4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0307 	and.w	r3, r3, #7
 8001a3a:	683a      	ldr	r2, [r7, #0]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d001      	beq.n	8001a44 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e032      	b.n	8001aaa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0304 	and.w	r3, r3, #4
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d008      	beq.n	8001a62 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a50:	4b19      	ldr	r3, [pc, #100]	; (8001ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	4916      	ldr	r1, [pc, #88]	; (8001ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0308 	and.w	r3, r3, #8
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d009      	beq.n	8001a82 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a6e:	4b12      	ldr	r3, [pc, #72]	; (8001ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	691b      	ldr	r3, [r3, #16]
 8001a7a:	00db      	lsls	r3, r3, #3
 8001a7c:	490e      	ldr	r1, [pc, #56]	; (8001ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a82:	f000 f821 	bl	8001ac8 <HAL_RCC_GetSysClockFreq>
 8001a86:	4602      	mov	r2, r0
 8001a88:	4b0b      	ldr	r3, [pc, #44]	; (8001ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	091b      	lsrs	r3, r3, #4
 8001a8e:	f003 030f 	and.w	r3, r3, #15
 8001a92:	490a      	ldr	r1, [pc, #40]	; (8001abc <HAL_RCC_ClockConfig+0x1c0>)
 8001a94:	5ccb      	ldrb	r3, [r1, r3]
 8001a96:	fa22 f303 	lsr.w	r3, r2, r3
 8001a9a:	4a09      	ldr	r2, [pc, #36]	; (8001ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a9e:	4b09      	ldr	r3, [pc, #36]	; (8001ac4 <HAL_RCC_ClockConfig+0x1c8>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7ff f8c0 	bl	8000c28 <HAL_InitTick>

  return HAL_OK;
 8001aa8:	2300      	movs	r3, #0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3710      	adds	r7, #16
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	40023c00 	.word	0x40023c00
 8001ab8:	40023800 	.word	0x40023800
 8001abc:	08002c34 	.word	0x08002c34
 8001ac0:	20000038 	.word	0x20000038
 8001ac4:	2000003c 	.word	0x2000003c

08001ac8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ac8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001acc:	b084      	sub	sp, #16
 8001ace:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	607b      	str	r3, [r7, #4]
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	60fb      	str	r3, [r7, #12]
 8001ad8:	2300      	movs	r3, #0
 8001ada:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001adc:	2300      	movs	r3, #0
 8001ade:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ae0:	4b67      	ldr	r3, [pc, #412]	; (8001c80 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	f003 030c 	and.w	r3, r3, #12
 8001ae8:	2b08      	cmp	r3, #8
 8001aea:	d00d      	beq.n	8001b08 <HAL_RCC_GetSysClockFreq+0x40>
 8001aec:	2b08      	cmp	r3, #8
 8001aee:	f200 80bd 	bhi.w	8001c6c <HAL_RCC_GetSysClockFreq+0x1a4>
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d002      	beq.n	8001afc <HAL_RCC_GetSysClockFreq+0x34>
 8001af6:	2b04      	cmp	r3, #4
 8001af8:	d003      	beq.n	8001b02 <HAL_RCC_GetSysClockFreq+0x3a>
 8001afa:	e0b7      	b.n	8001c6c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001afc:	4b61      	ldr	r3, [pc, #388]	; (8001c84 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001afe:	60bb      	str	r3, [r7, #8]
       break;
 8001b00:	e0b7      	b.n	8001c72 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b02:	4b61      	ldr	r3, [pc, #388]	; (8001c88 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001b04:	60bb      	str	r3, [r7, #8]
      break;
 8001b06:	e0b4      	b.n	8001c72 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b08:	4b5d      	ldr	r3, [pc, #372]	; (8001c80 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b10:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b12:	4b5b      	ldr	r3, [pc, #364]	; (8001c80 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d04d      	beq.n	8001bba <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b1e:	4b58      	ldr	r3, [pc, #352]	; (8001c80 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	099b      	lsrs	r3, r3, #6
 8001b24:	461a      	mov	r2, r3
 8001b26:	f04f 0300 	mov.w	r3, #0
 8001b2a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001b2e:	f04f 0100 	mov.w	r1, #0
 8001b32:	ea02 0800 	and.w	r8, r2, r0
 8001b36:	ea03 0901 	and.w	r9, r3, r1
 8001b3a:	4640      	mov	r0, r8
 8001b3c:	4649      	mov	r1, r9
 8001b3e:	f04f 0200 	mov.w	r2, #0
 8001b42:	f04f 0300 	mov.w	r3, #0
 8001b46:	014b      	lsls	r3, r1, #5
 8001b48:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001b4c:	0142      	lsls	r2, r0, #5
 8001b4e:	4610      	mov	r0, r2
 8001b50:	4619      	mov	r1, r3
 8001b52:	ebb0 0008 	subs.w	r0, r0, r8
 8001b56:	eb61 0109 	sbc.w	r1, r1, r9
 8001b5a:	f04f 0200 	mov.w	r2, #0
 8001b5e:	f04f 0300 	mov.w	r3, #0
 8001b62:	018b      	lsls	r3, r1, #6
 8001b64:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001b68:	0182      	lsls	r2, r0, #6
 8001b6a:	1a12      	subs	r2, r2, r0
 8001b6c:	eb63 0301 	sbc.w	r3, r3, r1
 8001b70:	f04f 0000 	mov.w	r0, #0
 8001b74:	f04f 0100 	mov.w	r1, #0
 8001b78:	00d9      	lsls	r1, r3, #3
 8001b7a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001b7e:	00d0      	lsls	r0, r2, #3
 8001b80:	4602      	mov	r2, r0
 8001b82:	460b      	mov	r3, r1
 8001b84:	eb12 0208 	adds.w	r2, r2, r8
 8001b88:	eb43 0309 	adc.w	r3, r3, r9
 8001b8c:	f04f 0000 	mov.w	r0, #0
 8001b90:	f04f 0100 	mov.w	r1, #0
 8001b94:	0259      	lsls	r1, r3, #9
 8001b96:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001b9a:	0250      	lsls	r0, r2, #9
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	460b      	mov	r3, r1
 8001ba0:	4610      	mov	r0, r2
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	f04f 0300 	mov.w	r3, #0
 8001bac:	f7fe fb1a 	bl	80001e4 <__aeabi_uldivmod>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	60fb      	str	r3, [r7, #12]
 8001bb8:	e04a      	b.n	8001c50 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bba:	4b31      	ldr	r3, [pc, #196]	; (8001c80 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	099b      	lsrs	r3, r3, #6
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	f04f 0300 	mov.w	r3, #0
 8001bc6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001bca:	f04f 0100 	mov.w	r1, #0
 8001bce:	ea02 0400 	and.w	r4, r2, r0
 8001bd2:	ea03 0501 	and.w	r5, r3, r1
 8001bd6:	4620      	mov	r0, r4
 8001bd8:	4629      	mov	r1, r5
 8001bda:	f04f 0200 	mov.w	r2, #0
 8001bde:	f04f 0300 	mov.w	r3, #0
 8001be2:	014b      	lsls	r3, r1, #5
 8001be4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001be8:	0142      	lsls	r2, r0, #5
 8001bea:	4610      	mov	r0, r2
 8001bec:	4619      	mov	r1, r3
 8001bee:	1b00      	subs	r0, r0, r4
 8001bf0:	eb61 0105 	sbc.w	r1, r1, r5
 8001bf4:	f04f 0200 	mov.w	r2, #0
 8001bf8:	f04f 0300 	mov.w	r3, #0
 8001bfc:	018b      	lsls	r3, r1, #6
 8001bfe:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001c02:	0182      	lsls	r2, r0, #6
 8001c04:	1a12      	subs	r2, r2, r0
 8001c06:	eb63 0301 	sbc.w	r3, r3, r1
 8001c0a:	f04f 0000 	mov.w	r0, #0
 8001c0e:	f04f 0100 	mov.w	r1, #0
 8001c12:	00d9      	lsls	r1, r3, #3
 8001c14:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001c18:	00d0      	lsls	r0, r2, #3
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	1912      	adds	r2, r2, r4
 8001c20:	eb45 0303 	adc.w	r3, r5, r3
 8001c24:	f04f 0000 	mov.w	r0, #0
 8001c28:	f04f 0100 	mov.w	r1, #0
 8001c2c:	0299      	lsls	r1, r3, #10
 8001c2e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001c32:	0290      	lsls	r0, r2, #10
 8001c34:	4602      	mov	r2, r0
 8001c36:	460b      	mov	r3, r1
 8001c38:	4610      	mov	r0, r2
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	461a      	mov	r2, r3
 8001c40:	f04f 0300 	mov.w	r3, #0
 8001c44:	f7fe face 	bl	80001e4 <__aeabi_uldivmod>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c50:	4b0b      	ldr	r3, [pc, #44]	; (8001c80 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	0c1b      	lsrs	r3, r3, #16
 8001c56:	f003 0303 	and.w	r3, r3, #3
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001c60:	68fa      	ldr	r2, [r7, #12]
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c68:	60bb      	str	r3, [r7, #8]
      break;
 8001c6a:	e002      	b.n	8001c72 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c6c:	4b05      	ldr	r3, [pc, #20]	; (8001c84 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001c6e:	60bb      	str	r3, [r7, #8]
      break;
 8001c70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c72:	68bb      	ldr	r3, [r7, #8]
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3710      	adds	r7, #16
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001c7e:	bf00      	nop
 8001c80:	40023800 	.word	0x40023800
 8001c84:	00f42400 	.word	0x00f42400
 8001c88:	007a1200 	.word	0x007a1200

08001c8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c90:	4b03      	ldr	r3, [pc, #12]	; (8001ca0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c92:	681b      	ldr	r3, [r3, #0]
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	20000038 	.word	0x20000038

08001ca4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ca8:	f7ff fff0 	bl	8001c8c <HAL_RCC_GetHCLKFreq>
 8001cac:	4602      	mov	r2, r0
 8001cae:	4b05      	ldr	r3, [pc, #20]	; (8001cc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	0a9b      	lsrs	r3, r3, #10
 8001cb4:	f003 0307 	and.w	r3, r3, #7
 8001cb8:	4903      	ldr	r1, [pc, #12]	; (8001cc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cba:	5ccb      	ldrb	r3, [r1, r3]
 8001cbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	40023800 	.word	0x40023800
 8001cc8:	08002c44 	.word	0x08002c44

08001ccc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001cd0:	f7ff ffdc 	bl	8001c8c <HAL_RCC_GetHCLKFreq>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	4b05      	ldr	r3, [pc, #20]	; (8001cec <HAL_RCC_GetPCLK2Freq+0x20>)
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	0b5b      	lsrs	r3, r3, #13
 8001cdc:	f003 0307 	and.w	r3, r3, #7
 8001ce0:	4903      	ldr	r1, [pc, #12]	; (8001cf0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ce2:	5ccb      	ldrb	r3, [r1, r3]
 8001ce4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	40023800 	.word	0x40023800
 8001cf0:	08002c44 	.word	0x08002c44

08001cf4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d101      	bne.n	8001d06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e03f      	b.n	8001d86 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d106      	bne.n	8001d20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2200      	movs	r2, #0
 8001d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f7fe fe54 	bl	80009c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2224      	movs	r2, #36	; 0x24
 8001d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	68da      	ldr	r2, [r3, #12]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f000 fd7b 	bl	8002834 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	691a      	ldr	r2, [r3, #16]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001d4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	695a      	ldr	r2, [r3, #20]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001d5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	68da      	ldr	r2, [r3, #12]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001d6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2200      	movs	r2, #0
 8001d72:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2220      	movs	r2, #32
 8001d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2220      	movs	r2, #32
 8001d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3708      	adds	r7, #8
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b08a      	sub	sp, #40	; 0x28
 8001d92:	af02      	add	r7, sp, #8
 8001d94:	60f8      	str	r0, [r7, #12]
 8001d96:	60b9      	str	r1, [r7, #8]
 8001d98:	603b      	str	r3, [r7, #0]
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	2b20      	cmp	r3, #32
 8001dac:	d17c      	bne.n	8001ea8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d002      	beq.n	8001dba <HAL_UART_Transmit+0x2c>
 8001db4:	88fb      	ldrh	r3, [r7, #6]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d101      	bne.n	8001dbe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e075      	b.n	8001eaa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d101      	bne.n	8001dcc <HAL_UART_Transmit+0x3e>
 8001dc8:	2302      	movs	r3, #2
 8001dca:	e06e      	b.n	8001eaa <HAL_UART_Transmit+0x11c>
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2221      	movs	r2, #33	; 0x21
 8001dde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001de2:	f7fe ff65 	bl	8000cb0 <HAL_GetTick>
 8001de6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	88fa      	ldrh	r2, [r7, #6]
 8001dec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	88fa      	ldrh	r2, [r7, #6]
 8001df2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001dfc:	d108      	bne.n	8001e10 <HAL_UART_Transmit+0x82>
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	691b      	ldr	r3, [r3, #16]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d104      	bne.n	8001e10 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001e06:	2300      	movs	r3, #0
 8001e08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	61bb      	str	r3, [r7, #24]
 8001e0e:	e003      	b.n	8001e18 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001e14:	2300      	movs	r3, #0
 8001e16:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001e20:	e02a      	b.n	8001e78 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	9300      	str	r3, [sp, #0]
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	2180      	movs	r1, #128	; 0x80
 8001e2c:	68f8      	ldr	r0, [r7, #12]
 8001e2e:	f000 faf9 	bl	8002424 <UART_WaitOnFlagUntilTimeout>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d001      	beq.n	8001e3c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	e036      	b.n	8001eaa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d10b      	bne.n	8001e5a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001e42:	69bb      	ldr	r3, [r7, #24]
 8001e44:	881b      	ldrh	r3, [r3, #0]
 8001e46:	461a      	mov	r2, r3
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001e50:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	3302      	adds	r3, #2
 8001e56:	61bb      	str	r3, [r7, #24]
 8001e58:	e007      	b.n	8001e6a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	781a      	ldrb	r2, [r3, #0]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	3301      	adds	r3, #1
 8001e68:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	3b01      	subs	r3, #1
 8001e72:	b29a      	uxth	r2, r3
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001e7c:	b29b      	uxth	r3, r3
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d1cf      	bne.n	8001e22 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	9300      	str	r3, [sp, #0]
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	2140      	movs	r1, #64	; 0x40
 8001e8c:	68f8      	ldr	r0, [r7, #12]
 8001e8e:	f000 fac9 	bl	8002424 <UART_WaitOnFlagUntilTimeout>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d001      	beq.n	8001e9c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	e006      	b.n	8001eaa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2220      	movs	r2, #32
 8001ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	e000      	b.n	8001eaa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001ea8:	2302      	movs	r3, #2
  }
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3720      	adds	r7, #32
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
	...

08001eb4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b0ba      	sub	sp, #232	; 0xe8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	695b      	ldr	r3, [r3, #20]
 8001ed6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8001eda:	2300      	movs	r3, #0
 8001edc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001ee6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001eea:	f003 030f 	and.w	r3, r3, #15
 8001eee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8001ef2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d10f      	bne.n	8001f1a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001efa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001efe:	f003 0320 	and.w	r3, r3, #32
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d009      	beq.n	8001f1a <HAL_UART_IRQHandler+0x66>
 8001f06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001f0a:	f003 0320 	and.w	r3, r3, #32
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d003      	beq.n	8001f1a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f000 fbd3 	bl	80026be <UART_Receive_IT>
      return;
 8001f18:	e256      	b.n	80023c8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001f1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	f000 80de 	beq.w	80020e0 <HAL_UART_IRQHandler+0x22c>
 8001f24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001f28:	f003 0301 	and.w	r3, r3, #1
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d106      	bne.n	8001f3e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001f30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001f34:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	f000 80d1 	beq.w	80020e0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001f3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d00b      	beq.n	8001f62 <HAL_UART_IRQHandler+0xae>
 8001f4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001f4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d005      	beq.n	8001f62 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5a:	f043 0201 	orr.w	r2, r3, #1
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001f62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f66:	f003 0304 	and.w	r3, r3, #4
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d00b      	beq.n	8001f86 <HAL_UART_IRQHandler+0xd2>
 8001f6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d005      	beq.n	8001f86 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7e:	f043 0202 	orr.w	r2, r3, #2
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001f86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f8a:	f003 0302 	and.w	r3, r3, #2
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d00b      	beq.n	8001faa <HAL_UART_IRQHandler+0xf6>
 8001f92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001f96:	f003 0301 	and.w	r3, r3, #1
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d005      	beq.n	8001faa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa2:	f043 0204 	orr.w	r2, r3, #4
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001faa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001fae:	f003 0308 	and.w	r3, r3, #8
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d011      	beq.n	8001fda <HAL_UART_IRQHandler+0x126>
 8001fb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001fba:	f003 0320 	and.w	r3, r3, #32
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d105      	bne.n	8001fce <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001fc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001fc6:	f003 0301 	and.w	r3, r3, #1
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d005      	beq.n	8001fda <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd2:	f043 0208 	orr.w	r2, r3, #8
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	f000 81ed 	beq.w	80023be <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001fe4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001fe8:	f003 0320 	and.w	r3, r3, #32
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d008      	beq.n	8002002 <HAL_UART_IRQHandler+0x14e>
 8001ff0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001ff4:	f003 0320 	and.w	r3, r3, #32
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d002      	beq.n	8002002 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f000 fb5e 	bl	80026be <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	695b      	ldr	r3, [r3, #20]
 8002008:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800200c:	2b40      	cmp	r3, #64	; 0x40
 800200e:	bf0c      	ite	eq
 8002010:	2301      	moveq	r3, #1
 8002012:	2300      	movne	r3, #0
 8002014:	b2db      	uxtb	r3, r3
 8002016:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201e:	f003 0308 	and.w	r3, r3, #8
 8002022:	2b00      	cmp	r3, #0
 8002024:	d103      	bne.n	800202e <HAL_UART_IRQHandler+0x17a>
 8002026:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800202a:	2b00      	cmp	r3, #0
 800202c:	d04f      	beq.n	80020ce <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f000 fa66 	bl	8002500 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	695b      	ldr	r3, [r3, #20]
 800203a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800203e:	2b40      	cmp	r3, #64	; 0x40
 8002040:	d141      	bne.n	80020c6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	3314      	adds	r3, #20
 8002048:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800204c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002050:	e853 3f00 	ldrex	r3, [r3]
 8002054:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002058:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800205c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002060:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	3314      	adds	r3, #20
 800206a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800206e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002072:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002076:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800207a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800207e:	e841 2300 	strex	r3, r2, [r1]
 8002082:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002086:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d1d9      	bne.n	8002042 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002092:	2b00      	cmp	r3, #0
 8002094:	d013      	beq.n	80020be <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800209a:	4a7d      	ldr	r2, [pc, #500]	; (8002290 <HAL_UART_IRQHandler+0x3dc>)
 800209c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7fe ffb5 	bl	8001012 <HAL_DMA_Abort_IT>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d016      	beq.n	80020dc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80020b8:	4610      	mov	r0, r2
 80020ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020bc:	e00e      	b.n	80020dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f000 f99a 	bl	80023f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020c4:	e00a      	b.n	80020dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f000 f996 	bl	80023f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020cc:	e006      	b.n	80020dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f000 f992 	bl	80023f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80020da:	e170      	b.n	80023be <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020dc:	bf00      	nop
    return;
 80020de:	e16e      	b.n	80023be <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	f040 814a 	bne.w	800237e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80020ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80020ee:	f003 0310 	and.w	r3, r3, #16
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	f000 8143 	beq.w	800237e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80020f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80020fc:	f003 0310 	and.w	r3, r3, #16
 8002100:	2b00      	cmp	r3, #0
 8002102:	f000 813c 	beq.w	800237e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002106:	2300      	movs	r3, #0
 8002108:	60bb      	str	r3, [r7, #8]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	60bb      	str	r3, [r7, #8]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	60bb      	str	r3, [r7, #8]
 800211a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	695b      	ldr	r3, [r3, #20]
 8002122:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002126:	2b40      	cmp	r3, #64	; 0x40
 8002128:	f040 80b4 	bne.w	8002294 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002138:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800213c:	2b00      	cmp	r3, #0
 800213e:	f000 8140 	beq.w	80023c2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002146:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800214a:	429a      	cmp	r2, r3
 800214c:	f080 8139 	bcs.w	80023c2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002156:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800215c:	69db      	ldr	r3, [r3, #28]
 800215e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002162:	f000 8088 	beq.w	8002276 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	330c      	adds	r3, #12
 800216c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002170:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002174:	e853 3f00 	ldrex	r3, [r3]
 8002178:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800217c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002180:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002184:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	330c      	adds	r3, #12
 800218e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002192:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002196:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800219a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800219e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80021a2:	e841 2300 	strex	r3, r2, [r1]
 80021a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80021aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d1d9      	bne.n	8002166 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	3314      	adds	r3, #20
 80021b8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021bc:	e853 3f00 	ldrex	r3, [r3]
 80021c0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80021c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80021c4:	f023 0301 	bic.w	r3, r3, #1
 80021c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	3314      	adds	r3, #20
 80021d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80021d6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80021da:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021dc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80021de:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80021e2:	e841 2300 	strex	r3, r2, [r1]
 80021e6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80021e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d1e1      	bne.n	80021b2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	3314      	adds	r3, #20
 80021f4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80021f8:	e853 3f00 	ldrex	r3, [r3]
 80021fc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80021fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002200:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002204:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	3314      	adds	r3, #20
 800220e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002212:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002214:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002216:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002218:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800221a:	e841 2300 	strex	r3, r2, [r1]
 800221e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002220:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002222:	2b00      	cmp	r3, #0
 8002224:	d1e3      	bne.n	80021ee <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2220      	movs	r2, #32
 800222a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	330c      	adds	r3, #12
 800223a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800223c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800223e:	e853 3f00 	ldrex	r3, [r3]
 8002242:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002244:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002246:	f023 0310 	bic.w	r3, r3, #16
 800224a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	330c      	adds	r3, #12
 8002254:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002258:	65ba      	str	r2, [r7, #88]	; 0x58
 800225a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800225c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800225e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002260:	e841 2300 	strex	r3, r2, [r1]
 8002264:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002266:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002268:	2b00      	cmp	r3, #0
 800226a:	d1e3      	bne.n	8002234 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002270:	4618      	mov	r0, r3
 8002272:	f7fe fe5e 	bl	8000f32 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800227e:	b29b      	uxth	r3, r3
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	b29b      	uxth	r3, r3
 8002284:	4619      	mov	r1, r3
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f000 f8c0 	bl	800240c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800228c:	e099      	b.n	80023c2 <HAL_UART_IRQHandler+0x50e>
 800228e:	bf00      	nop
 8002290:	080025c7 	.word	0x080025c7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800229c:	b29b      	uxth	r3, r3
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80022a8:	b29b      	uxth	r3, r3
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	f000 808b 	beq.w	80023c6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80022b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	f000 8086 	beq.w	80023c6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	330c      	adds	r3, #12
 80022c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022c4:	e853 3f00 	ldrex	r3, [r3]
 80022c8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80022ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80022d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	330c      	adds	r3, #12
 80022da:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80022de:	647a      	str	r2, [r7, #68]	; 0x44
 80022e0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80022e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80022e6:	e841 2300 	strex	r3, r2, [r1]
 80022ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80022ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d1e3      	bne.n	80022ba <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	3314      	adds	r3, #20
 80022f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fc:	e853 3f00 	ldrex	r3, [r3]
 8002300:	623b      	str	r3, [r7, #32]
   return(result);
 8002302:	6a3b      	ldr	r3, [r7, #32]
 8002304:	f023 0301 	bic.w	r3, r3, #1
 8002308:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	3314      	adds	r3, #20
 8002312:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002316:	633a      	str	r2, [r7, #48]	; 0x30
 8002318:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800231a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800231c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800231e:	e841 2300 	strex	r3, r2, [r1]
 8002322:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002326:	2b00      	cmp	r3, #0
 8002328:	d1e3      	bne.n	80022f2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2220      	movs	r2, #32
 800232e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2200      	movs	r2, #0
 8002336:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	330c      	adds	r3, #12
 800233e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	e853 3f00 	ldrex	r3, [r3]
 8002346:	60fb      	str	r3, [r7, #12]
   return(result);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	f023 0310 	bic.w	r3, r3, #16
 800234e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	330c      	adds	r3, #12
 8002358:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800235c:	61fa      	str	r2, [r7, #28]
 800235e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002360:	69b9      	ldr	r1, [r7, #24]
 8002362:	69fa      	ldr	r2, [r7, #28]
 8002364:	e841 2300 	strex	r3, r2, [r1]
 8002368:	617b      	str	r3, [r7, #20]
   return(result);
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d1e3      	bne.n	8002338 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002370:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002374:	4619      	mov	r1, r3
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f000 f848 	bl	800240c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800237c:	e023      	b.n	80023c6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800237e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002386:	2b00      	cmp	r3, #0
 8002388:	d009      	beq.n	800239e <HAL_UART_IRQHandler+0x4ea>
 800238a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800238e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002392:	2b00      	cmp	r3, #0
 8002394:	d003      	beq.n	800239e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f000 f929 	bl	80025ee <UART_Transmit_IT>
    return;
 800239c:	e014      	b.n	80023c8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800239e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d00e      	beq.n	80023c8 <HAL_UART_IRQHandler+0x514>
 80023aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80023ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d008      	beq.n	80023c8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f000 f969 	bl	800268e <UART_EndTransmit_IT>
    return;
 80023bc:	e004      	b.n	80023c8 <HAL_UART_IRQHandler+0x514>
    return;
 80023be:	bf00      	nop
 80023c0:	e002      	b.n	80023c8 <HAL_UART_IRQHandler+0x514>
      return;
 80023c2:	bf00      	nop
 80023c4:	e000      	b.n	80023c8 <HAL_UART_IRQHandler+0x514>
      return;
 80023c6:	bf00      	nop
  }
}
 80023c8:	37e8      	adds	r7, #232	; 0xe8
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop

080023d0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80023d8:	bf00      	nop
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80023ec:	bf00      	nop
 80023ee:	370c      	adds	r7, #12
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002400:	bf00      	nop
 8002402:	370c      	adds	r7, #12
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr

0800240c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	460b      	mov	r3, r1
 8002416:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002418:	bf00      	nop
 800241a:	370c      	adds	r7, #12
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr

08002424 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b090      	sub	sp, #64	; 0x40
 8002428:	af00      	add	r7, sp, #0
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	60b9      	str	r1, [r7, #8]
 800242e:	603b      	str	r3, [r7, #0]
 8002430:	4613      	mov	r3, r2
 8002432:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002434:	e050      	b.n	80024d8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002436:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800243c:	d04c      	beq.n	80024d8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800243e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002440:	2b00      	cmp	r3, #0
 8002442:	d007      	beq.n	8002454 <UART_WaitOnFlagUntilTimeout+0x30>
 8002444:	f7fe fc34 	bl	8000cb0 <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002450:	429a      	cmp	r2, r3
 8002452:	d241      	bcs.n	80024d8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	330c      	adds	r3, #12
 800245a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800245c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800245e:	e853 3f00 	ldrex	r3, [r3]
 8002462:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002466:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800246a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	330c      	adds	r3, #12
 8002472:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002474:	637a      	str	r2, [r7, #52]	; 0x34
 8002476:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002478:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800247a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800247c:	e841 2300 	strex	r3, r2, [r1]
 8002480:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002484:	2b00      	cmp	r3, #0
 8002486:	d1e5      	bne.n	8002454 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	3314      	adds	r3, #20
 800248e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	e853 3f00 	ldrex	r3, [r3]
 8002496:	613b      	str	r3, [r7, #16]
   return(result);
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	f023 0301 	bic.w	r3, r3, #1
 800249e:	63bb      	str	r3, [r7, #56]	; 0x38
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	3314      	adds	r3, #20
 80024a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80024a8:	623a      	str	r2, [r7, #32]
 80024aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024ac:	69f9      	ldr	r1, [r7, #28]
 80024ae:	6a3a      	ldr	r2, [r7, #32]
 80024b0:	e841 2300 	strex	r3, r2, [r1]
 80024b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d1e5      	bne.n	8002488 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2220      	movs	r2, #32
 80024c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2220      	movs	r2, #32
 80024c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2200      	movs	r2, #0
 80024d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80024d4:	2303      	movs	r3, #3
 80024d6:	e00f      	b.n	80024f8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	4013      	ands	r3, r2
 80024e2:	68ba      	ldr	r2, [r7, #8]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	bf0c      	ite	eq
 80024e8:	2301      	moveq	r3, #1
 80024ea:	2300      	movne	r3, #0
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	461a      	mov	r2, r3
 80024f0:	79fb      	ldrb	r3, [r7, #7]
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d09f      	beq.n	8002436 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80024f6:	2300      	movs	r3, #0
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3740      	adds	r7, #64	; 0x40
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}

08002500 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002500:	b480      	push	{r7}
 8002502:	b095      	sub	sp, #84	; 0x54
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	330c      	adds	r3, #12
 800250e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002512:	e853 3f00 	ldrex	r3, [r3]
 8002516:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800251a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800251e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	330c      	adds	r3, #12
 8002526:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002528:	643a      	str	r2, [r7, #64]	; 0x40
 800252a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800252c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800252e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002530:	e841 2300 	strex	r3, r2, [r1]
 8002534:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002538:	2b00      	cmp	r3, #0
 800253a:	d1e5      	bne.n	8002508 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	3314      	adds	r3, #20
 8002542:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002544:	6a3b      	ldr	r3, [r7, #32]
 8002546:	e853 3f00 	ldrex	r3, [r3]
 800254a:	61fb      	str	r3, [r7, #28]
   return(result);
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	f023 0301 	bic.w	r3, r3, #1
 8002552:	64bb      	str	r3, [r7, #72]	; 0x48
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	3314      	adds	r3, #20
 800255a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800255c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800255e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002560:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002562:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002564:	e841 2300 	strex	r3, r2, [r1]
 8002568:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800256a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256c:	2b00      	cmp	r3, #0
 800256e:	d1e5      	bne.n	800253c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002574:	2b01      	cmp	r3, #1
 8002576:	d119      	bne.n	80025ac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	330c      	adds	r3, #12
 800257e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	e853 3f00 	ldrex	r3, [r3]
 8002586:	60bb      	str	r3, [r7, #8]
   return(result);
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	f023 0310 	bic.w	r3, r3, #16
 800258e:	647b      	str	r3, [r7, #68]	; 0x44
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	330c      	adds	r3, #12
 8002596:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002598:	61ba      	str	r2, [r7, #24]
 800259a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800259c:	6979      	ldr	r1, [r7, #20]
 800259e:	69ba      	ldr	r2, [r7, #24]
 80025a0:	e841 2300 	strex	r3, r2, [r1]
 80025a4:	613b      	str	r3, [r7, #16]
   return(result);
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d1e5      	bne.n	8002578 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2220      	movs	r2, #32
 80025b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80025ba:	bf00      	nop
 80025bc:	3754      	adds	r7, #84	; 0x54
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr

080025c6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80025c6:	b580      	push	{r7, lr}
 80025c8:	b084      	sub	sp, #16
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025d2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2200      	movs	r2, #0
 80025d8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2200      	movs	r2, #0
 80025de:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80025e0:	68f8      	ldr	r0, [r7, #12]
 80025e2:	f7ff ff09 	bl	80023f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80025e6:	bf00      	nop
 80025e8:	3710      	adds	r7, #16
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}

080025ee <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80025ee:	b480      	push	{r7}
 80025f0:	b085      	sub	sp, #20
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	2b21      	cmp	r3, #33	; 0x21
 8002600:	d13e      	bne.n	8002680 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800260a:	d114      	bne.n	8002636 <UART_Transmit_IT+0x48>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	691b      	ldr	r3, [r3, #16]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d110      	bne.n	8002636 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6a1b      	ldr	r3, [r3, #32]
 8002618:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	881b      	ldrh	r3, [r3, #0]
 800261e:	461a      	mov	r2, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002628:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a1b      	ldr	r3, [r3, #32]
 800262e:	1c9a      	adds	r2, r3, #2
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	621a      	str	r2, [r3, #32]
 8002634:	e008      	b.n	8002648 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6a1b      	ldr	r3, [r3, #32]
 800263a:	1c59      	adds	r1, r3, #1
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	6211      	str	r1, [r2, #32]
 8002640:	781a      	ldrb	r2, [r3, #0]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800264c:	b29b      	uxth	r3, r3
 800264e:	3b01      	subs	r3, #1
 8002650:	b29b      	uxth	r3, r3
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	4619      	mov	r1, r3
 8002656:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002658:	2b00      	cmp	r3, #0
 800265a:	d10f      	bne.n	800267c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	68da      	ldr	r2, [r3, #12]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800266a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	68da      	ldr	r2, [r3, #12]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800267a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800267c:	2300      	movs	r3, #0
 800267e:	e000      	b.n	8002682 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002680:	2302      	movs	r3, #2
  }
}
 8002682:	4618      	mov	r0, r3
 8002684:	3714      	adds	r7, #20
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr

0800268e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800268e:	b580      	push	{r7, lr}
 8002690:	b082      	sub	sp, #8
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	68da      	ldr	r2, [r3, #12]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026a4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2220      	movs	r2, #32
 80026aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f7ff fe8e 	bl	80023d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3708      	adds	r7, #8
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}

080026be <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80026be:	b580      	push	{r7, lr}
 80026c0:	b08c      	sub	sp, #48	; 0x30
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	2b22      	cmp	r3, #34	; 0x22
 80026d0:	f040 80ab 	bne.w	800282a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026dc:	d117      	bne.n	800270e <UART_Receive_IT+0x50>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	691b      	ldr	r3, [r3, #16]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d113      	bne.n	800270e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80026e6:	2300      	movs	r3, #0
 80026e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ee:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026fc:	b29a      	uxth	r2, r3
 80026fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002700:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002706:	1c9a      	adds	r2, r3, #2
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	629a      	str	r2, [r3, #40]	; 0x28
 800270c:	e026      	b.n	800275c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002712:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002714:	2300      	movs	r3, #0
 8002716:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002720:	d007      	beq.n	8002732 <UART_Receive_IT+0x74>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d10a      	bne.n	8002740 <UART_Receive_IT+0x82>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	691b      	ldr	r3, [r3, #16]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d106      	bne.n	8002740 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	b2da      	uxtb	r2, r3
 800273a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800273c:	701a      	strb	r2, [r3, #0]
 800273e:	e008      	b.n	8002752 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	b2db      	uxtb	r3, r3
 8002748:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800274c:	b2da      	uxtb	r2, r3
 800274e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002750:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002756:	1c5a      	adds	r2, r3, #1
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002760:	b29b      	uxth	r3, r3
 8002762:	3b01      	subs	r3, #1
 8002764:	b29b      	uxth	r3, r3
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	4619      	mov	r1, r3
 800276a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800276c:	2b00      	cmp	r3, #0
 800276e:	d15a      	bne.n	8002826 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	68da      	ldr	r2, [r3, #12]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f022 0220 	bic.w	r2, r2, #32
 800277e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	68da      	ldr	r2, [r3, #12]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800278e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	695a      	ldr	r2, [r3, #20]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f022 0201 	bic.w	r2, r2, #1
 800279e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2220      	movs	r2, #32
 80027a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d135      	bne.n	800281c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	330c      	adds	r3, #12
 80027bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	e853 3f00 	ldrex	r3, [r3]
 80027c4:	613b      	str	r3, [r7, #16]
   return(result);
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	f023 0310 	bic.w	r3, r3, #16
 80027cc:	627b      	str	r3, [r7, #36]	; 0x24
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	330c      	adds	r3, #12
 80027d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027d6:	623a      	str	r2, [r7, #32]
 80027d8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027da:	69f9      	ldr	r1, [r7, #28]
 80027dc:	6a3a      	ldr	r2, [r7, #32]
 80027de:	e841 2300 	strex	r3, r2, [r1]
 80027e2:	61bb      	str	r3, [r7, #24]
   return(result);
 80027e4:	69bb      	ldr	r3, [r7, #24]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d1e5      	bne.n	80027b6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0310 	and.w	r3, r3, #16
 80027f4:	2b10      	cmp	r3, #16
 80027f6:	d10a      	bne.n	800280e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80027f8:	2300      	movs	r3, #0
 80027fa:	60fb      	str	r3, [r7, #12]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	60fb      	str	r3, [r7, #12]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	60fb      	str	r3, [r7, #12]
 800280c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002812:	4619      	mov	r1, r3
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f7ff fdf9 	bl	800240c <HAL_UARTEx_RxEventCallback>
 800281a:	e002      	b.n	8002822 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f7ff fde1 	bl	80023e4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002822:	2300      	movs	r3, #0
 8002824:	e002      	b.n	800282c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002826:	2300      	movs	r3, #0
 8002828:	e000      	b.n	800282c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800282a:	2302      	movs	r3, #2
  }
}
 800282c:	4618      	mov	r0, r3
 800282e:	3730      	adds	r7, #48	; 0x30
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}

08002834 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002838:	b09f      	sub	sp, #124	; 0x7c
 800283a:	af00      	add	r7, sp, #0
 800283c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800283e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	691b      	ldr	r3, [r3, #16]
 8002844:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002848:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800284a:	68d9      	ldr	r1, [r3, #12]
 800284c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	ea40 0301 	orr.w	r3, r0, r1
 8002854:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002856:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002858:	689a      	ldr	r2, [r3, #8]
 800285a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800285c:	691b      	ldr	r3, [r3, #16]
 800285e:	431a      	orrs	r2, r3
 8002860:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002862:	695b      	ldr	r3, [r3, #20]
 8002864:	431a      	orrs	r2, r3
 8002866:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002868:	69db      	ldr	r3, [r3, #28]
 800286a:	4313      	orrs	r3, r2
 800286c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800286e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002878:	f021 010c 	bic.w	r1, r1, #12
 800287c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002882:	430b      	orrs	r3, r1
 8002884:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002886:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	695b      	ldr	r3, [r3, #20]
 800288c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002890:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002892:	6999      	ldr	r1, [r3, #24]
 8002894:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	ea40 0301 	orr.w	r3, r0, r1
 800289c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800289e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	4bc5      	ldr	r3, [pc, #788]	; (8002bb8 <UART_SetConfig+0x384>)
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d004      	beq.n	80028b2 <UART_SetConfig+0x7e>
 80028a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	4bc3      	ldr	r3, [pc, #780]	; (8002bbc <UART_SetConfig+0x388>)
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d103      	bne.n	80028ba <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80028b2:	f7ff fa0b 	bl	8001ccc <HAL_RCC_GetPCLK2Freq>
 80028b6:	6778      	str	r0, [r7, #116]	; 0x74
 80028b8:	e002      	b.n	80028c0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80028ba:	f7ff f9f3 	bl	8001ca4 <HAL_RCC_GetPCLK1Freq>
 80028be:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80028c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028c2:	69db      	ldr	r3, [r3, #28]
 80028c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028c8:	f040 80b6 	bne.w	8002a38 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80028cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028ce:	461c      	mov	r4, r3
 80028d0:	f04f 0500 	mov.w	r5, #0
 80028d4:	4622      	mov	r2, r4
 80028d6:	462b      	mov	r3, r5
 80028d8:	1891      	adds	r1, r2, r2
 80028da:	6439      	str	r1, [r7, #64]	; 0x40
 80028dc:	415b      	adcs	r3, r3
 80028de:	647b      	str	r3, [r7, #68]	; 0x44
 80028e0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80028e4:	1912      	adds	r2, r2, r4
 80028e6:	eb45 0303 	adc.w	r3, r5, r3
 80028ea:	f04f 0000 	mov.w	r0, #0
 80028ee:	f04f 0100 	mov.w	r1, #0
 80028f2:	00d9      	lsls	r1, r3, #3
 80028f4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80028f8:	00d0      	lsls	r0, r2, #3
 80028fa:	4602      	mov	r2, r0
 80028fc:	460b      	mov	r3, r1
 80028fe:	1911      	adds	r1, r2, r4
 8002900:	6639      	str	r1, [r7, #96]	; 0x60
 8002902:	416b      	adcs	r3, r5
 8002904:	667b      	str	r3, [r7, #100]	; 0x64
 8002906:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	461a      	mov	r2, r3
 800290c:	f04f 0300 	mov.w	r3, #0
 8002910:	1891      	adds	r1, r2, r2
 8002912:	63b9      	str	r1, [r7, #56]	; 0x38
 8002914:	415b      	adcs	r3, r3
 8002916:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002918:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800291c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002920:	f7fd fc60 	bl	80001e4 <__aeabi_uldivmod>
 8002924:	4602      	mov	r2, r0
 8002926:	460b      	mov	r3, r1
 8002928:	4ba5      	ldr	r3, [pc, #660]	; (8002bc0 <UART_SetConfig+0x38c>)
 800292a:	fba3 2302 	umull	r2, r3, r3, r2
 800292e:	095b      	lsrs	r3, r3, #5
 8002930:	011e      	lsls	r6, r3, #4
 8002932:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002934:	461c      	mov	r4, r3
 8002936:	f04f 0500 	mov.w	r5, #0
 800293a:	4622      	mov	r2, r4
 800293c:	462b      	mov	r3, r5
 800293e:	1891      	adds	r1, r2, r2
 8002940:	6339      	str	r1, [r7, #48]	; 0x30
 8002942:	415b      	adcs	r3, r3
 8002944:	637b      	str	r3, [r7, #52]	; 0x34
 8002946:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800294a:	1912      	adds	r2, r2, r4
 800294c:	eb45 0303 	adc.w	r3, r5, r3
 8002950:	f04f 0000 	mov.w	r0, #0
 8002954:	f04f 0100 	mov.w	r1, #0
 8002958:	00d9      	lsls	r1, r3, #3
 800295a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800295e:	00d0      	lsls	r0, r2, #3
 8002960:	4602      	mov	r2, r0
 8002962:	460b      	mov	r3, r1
 8002964:	1911      	adds	r1, r2, r4
 8002966:	65b9      	str	r1, [r7, #88]	; 0x58
 8002968:	416b      	adcs	r3, r5
 800296a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800296c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	461a      	mov	r2, r3
 8002972:	f04f 0300 	mov.w	r3, #0
 8002976:	1891      	adds	r1, r2, r2
 8002978:	62b9      	str	r1, [r7, #40]	; 0x28
 800297a:	415b      	adcs	r3, r3
 800297c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800297e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002982:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002986:	f7fd fc2d 	bl	80001e4 <__aeabi_uldivmod>
 800298a:	4602      	mov	r2, r0
 800298c:	460b      	mov	r3, r1
 800298e:	4b8c      	ldr	r3, [pc, #560]	; (8002bc0 <UART_SetConfig+0x38c>)
 8002990:	fba3 1302 	umull	r1, r3, r3, r2
 8002994:	095b      	lsrs	r3, r3, #5
 8002996:	2164      	movs	r1, #100	; 0x64
 8002998:	fb01 f303 	mul.w	r3, r1, r3
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	00db      	lsls	r3, r3, #3
 80029a0:	3332      	adds	r3, #50	; 0x32
 80029a2:	4a87      	ldr	r2, [pc, #540]	; (8002bc0 <UART_SetConfig+0x38c>)
 80029a4:	fba2 2303 	umull	r2, r3, r2, r3
 80029a8:	095b      	lsrs	r3, r3, #5
 80029aa:	005b      	lsls	r3, r3, #1
 80029ac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80029b0:	441e      	add	r6, r3
 80029b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029b4:	4618      	mov	r0, r3
 80029b6:	f04f 0100 	mov.w	r1, #0
 80029ba:	4602      	mov	r2, r0
 80029bc:	460b      	mov	r3, r1
 80029be:	1894      	adds	r4, r2, r2
 80029c0:	623c      	str	r4, [r7, #32]
 80029c2:	415b      	adcs	r3, r3
 80029c4:	627b      	str	r3, [r7, #36]	; 0x24
 80029c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80029ca:	1812      	adds	r2, r2, r0
 80029cc:	eb41 0303 	adc.w	r3, r1, r3
 80029d0:	f04f 0400 	mov.w	r4, #0
 80029d4:	f04f 0500 	mov.w	r5, #0
 80029d8:	00dd      	lsls	r5, r3, #3
 80029da:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80029de:	00d4      	lsls	r4, r2, #3
 80029e0:	4622      	mov	r2, r4
 80029e2:	462b      	mov	r3, r5
 80029e4:	1814      	adds	r4, r2, r0
 80029e6:	653c      	str	r4, [r7, #80]	; 0x50
 80029e8:	414b      	adcs	r3, r1
 80029ea:	657b      	str	r3, [r7, #84]	; 0x54
 80029ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	461a      	mov	r2, r3
 80029f2:	f04f 0300 	mov.w	r3, #0
 80029f6:	1891      	adds	r1, r2, r2
 80029f8:	61b9      	str	r1, [r7, #24]
 80029fa:	415b      	adcs	r3, r3
 80029fc:	61fb      	str	r3, [r7, #28]
 80029fe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a02:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002a06:	f7fd fbed 	bl	80001e4 <__aeabi_uldivmod>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	460b      	mov	r3, r1
 8002a0e:	4b6c      	ldr	r3, [pc, #432]	; (8002bc0 <UART_SetConfig+0x38c>)
 8002a10:	fba3 1302 	umull	r1, r3, r3, r2
 8002a14:	095b      	lsrs	r3, r3, #5
 8002a16:	2164      	movs	r1, #100	; 0x64
 8002a18:	fb01 f303 	mul.w	r3, r1, r3
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	00db      	lsls	r3, r3, #3
 8002a20:	3332      	adds	r3, #50	; 0x32
 8002a22:	4a67      	ldr	r2, [pc, #412]	; (8002bc0 <UART_SetConfig+0x38c>)
 8002a24:	fba2 2303 	umull	r2, r3, r2, r3
 8002a28:	095b      	lsrs	r3, r3, #5
 8002a2a:	f003 0207 	and.w	r2, r3, #7
 8002a2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4432      	add	r2, r6
 8002a34:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002a36:	e0b9      	b.n	8002bac <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a3a:	461c      	mov	r4, r3
 8002a3c:	f04f 0500 	mov.w	r5, #0
 8002a40:	4622      	mov	r2, r4
 8002a42:	462b      	mov	r3, r5
 8002a44:	1891      	adds	r1, r2, r2
 8002a46:	6139      	str	r1, [r7, #16]
 8002a48:	415b      	adcs	r3, r3
 8002a4a:	617b      	str	r3, [r7, #20]
 8002a4c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002a50:	1912      	adds	r2, r2, r4
 8002a52:	eb45 0303 	adc.w	r3, r5, r3
 8002a56:	f04f 0000 	mov.w	r0, #0
 8002a5a:	f04f 0100 	mov.w	r1, #0
 8002a5e:	00d9      	lsls	r1, r3, #3
 8002a60:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002a64:	00d0      	lsls	r0, r2, #3
 8002a66:	4602      	mov	r2, r0
 8002a68:	460b      	mov	r3, r1
 8002a6a:	eb12 0804 	adds.w	r8, r2, r4
 8002a6e:	eb43 0905 	adc.w	r9, r3, r5
 8002a72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f04f 0100 	mov.w	r1, #0
 8002a7c:	f04f 0200 	mov.w	r2, #0
 8002a80:	f04f 0300 	mov.w	r3, #0
 8002a84:	008b      	lsls	r3, r1, #2
 8002a86:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002a8a:	0082      	lsls	r2, r0, #2
 8002a8c:	4640      	mov	r0, r8
 8002a8e:	4649      	mov	r1, r9
 8002a90:	f7fd fba8 	bl	80001e4 <__aeabi_uldivmod>
 8002a94:	4602      	mov	r2, r0
 8002a96:	460b      	mov	r3, r1
 8002a98:	4b49      	ldr	r3, [pc, #292]	; (8002bc0 <UART_SetConfig+0x38c>)
 8002a9a:	fba3 2302 	umull	r2, r3, r3, r2
 8002a9e:	095b      	lsrs	r3, r3, #5
 8002aa0:	011e      	lsls	r6, r3, #4
 8002aa2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f04f 0100 	mov.w	r1, #0
 8002aaa:	4602      	mov	r2, r0
 8002aac:	460b      	mov	r3, r1
 8002aae:	1894      	adds	r4, r2, r2
 8002ab0:	60bc      	str	r4, [r7, #8]
 8002ab2:	415b      	adcs	r3, r3
 8002ab4:	60fb      	str	r3, [r7, #12]
 8002ab6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002aba:	1812      	adds	r2, r2, r0
 8002abc:	eb41 0303 	adc.w	r3, r1, r3
 8002ac0:	f04f 0400 	mov.w	r4, #0
 8002ac4:	f04f 0500 	mov.w	r5, #0
 8002ac8:	00dd      	lsls	r5, r3, #3
 8002aca:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002ace:	00d4      	lsls	r4, r2, #3
 8002ad0:	4622      	mov	r2, r4
 8002ad2:	462b      	mov	r3, r5
 8002ad4:	1814      	adds	r4, r2, r0
 8002ad6:	64bc      	str	r4, [r7, #72]	; 0x48
 8002ad8:	414b      	adcs	r3, r1
 8002ada:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002adc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f04f 0100 	mov.w	r1, #0
 8002ae6:	f04f 0200 	mov.w	r2, #0
 8002aea:	f04f 0300 	mov.w	r3, #0
 8002aee:	008b      	lsls	r3, r1, #2
 8002af0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002af4:	0082      	lsls	r2, r0, #2
 8002af6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002afa:	f7fd fb73 	bl	80001e4 <__aeabi_uldivmod>
 8002afe:	4602      	mov	r2, r0
 8002b00:	460b      	mov	r3, r1
 8002b02:	4b2f      	ldr	r3, [pc, #188]	; (8002bc0 <UART_SetConfig+0x38c>)
 8002b04:	fba3 1302 	umull	r1, r3, r3, r2
 8002b08:	095b      	lsrs	r3, r3, #5
 8002b0a:	2164      	movs	r1, #100	; 0x64
 8002b0c:	fb01 f303 	mul.w	r3, r1, r3
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	011b      	lsls	r3, r3, #4
 8002b14:	3332      	adds	r3, #50	; 0x32
 8002b16:	4a2a      	ldr	r2, [pc, #168]	; (8002bc0 <UART_SetConfig+0x38c>)
 8002b18:	fba2 2303 	umull	r2, r3, r2, r3
 8002b1c:	095b      	lsrs	r3, r3, #5
 8002b1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b22:	441e      	add	r6, r3
 8002b24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b26:	4618      	mov	r0, r3
 8002b28:	f04f 0100 	mov.w	r1, #0
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	460b      	mov	r3, r1
 8002b30:	1894      	adds	r4, r2, r2
 8002b32:	603c      	str	r4, [r7, #0]
 8002b34:	415b      	adcs	r3, r3
 8002b36:	607b      	str	r3, [r7, #4]
 8002b38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b3c:	1812      	adds	r2, r2, r0
 8002b3e:	eb41 0303 	adc.w	r3, r1, r3
 8002b42:	f04f 0400 	mov.w	r4, #0
 8002b46:	f04f 0500 	mov.w	r5, #0
 8002b4a:	00dd      	lsls	r5, r3, #3
 8002b4c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002b50:	00d4      	lsls	r4, r2, #3
 8002b52:	4622      	mov	r2, r4
 8002b54:	462b      	mov	r3, r5
 8002b56:	eb12 0a00 	adds.w	sl, r2, r0
 8002b5a:	eb43 0b01 	adc.w	fp, r3, r1
 8002b5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f04f 0100 	mov.w	r1, #0
 8002b68:	f04f 0200 	mov.w	r2, #0
 8002b6c:	f04f 0300 	mov.w	r3, #0
 8002b70:	008b      	lsls	r3, r1, #2
 8002b72:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002b76:	0082      	lsls	r2, r0, #2
 8002b78:	4650      	mov	r0, sl
 8002b7a:	4659      	mov	r1, fp
 8002b7c:	f7fd fb32 	bl	80001e4 <__aeabi_uldivmod>
 8002b80:	4602      	mov	r2, r0
 8002b82:	460b      	mov	r3, r1
 8002b84:	4b0e      	ldr	r3, [pc, #56]	; (8002bc0 <UART_SetConfig+0x38c>)
 8002b86:	fba3 1302 	umull	r1, r3, r3, r2
 8002b8a:	095b      	lsrs	r3, r3, #5
 8002b8c:	2164      	movs	r1, #100	; 0x64
 8002b8e:	fb01 f303 	mul.w	r3, r1, r3
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	011b      	lsls	r3, r3, #4
 8002b96:	3332      	adds	r3, #50	; 0x32
 8002b98:	4a09      	ldr	r2, [pc, #36]	; (8002bc0 <UART_SetConfig+0x38c>)
 8002b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b9e:	095b      	lsrs	r3, r3, #5
 8002ba0:	f003 020f 	and.w	r2, r3, #15
 8002ba4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4432      	add	r2, r6
 8002baa:	609a      	str	r2, [r3, #8]
}
 8002bac:	bf00      	nop
 8002bae:	377c      	adds	r7, #124	; 0x7c
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002bb6:	bf00      	nop
 8002bb8:	40011000 	.word	0x40011000
 8002bbc:	40011400 	.word	0x40011400
 8002bc0:	51eb851f 	.word	0x51eb851f

08002bc4 <__libc_init_array>:
 8002bc4:	b570      	push	{r4, r5, r6, lr}
 8002bc6:	4d0d      	ldr	r5, [pc, #52]	; (8002bfc <__libc_init_array+0x38>)
 8002bc8:	4c0d      	ldr	r4, [pc, #52]	; (8002c00 <__libc_init_array+0x3c>)
 8002bca:	1b64      	subs	r4, r4, r5
 8002bcc:	10a4      	asrs	r4, r4, #2
 8002bce:	2600      	movs	r6, #0
 8002bd0:	42a6      	cmp	r6, r4
 8002bd2:	d109      	bne.n	8002be8 <__libc_init_array+0x24>
 8002bd4:	4d0b      	ldr	r5, [pc, #44]	; (8002c04 <__libc_init_array+0x40>)
 8002bd6:	4c0c      	ldr	r4, [pc, #48]	; (8002c08 <__libc_init_array+0x44>)
 8002bd8:	f000 f820 	bl	8002c1c <_init>
 8002bdc:	1b64      	subs	r4, r4, r5
 8002bde:	10a4      	asrs	r4, r4, #2
 8002be0:	2600      	movs	r6, #0
 8002be2:	42a6      	cmp	r6, r4
 8002be4:	d105      	bne.n	8002bf2 <__libc_init_array+0x2e>
 8002be6:	bd70      	pop	{r4, r5, r6, pc}
 8002be8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bec:	4798      	blx	r3
 8002bee:	3601      	adds	r6, #1
 8002bf0:	e7ee      	b.n	8002bd0 <__libc_init_array+0xc>
 8002bf2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bf6:	4798      	blx	r3
 8002bf8:	3601      	adds	r6, #1
 8002bfa:	e7f2      	b.n	8002be2 <__libc_init_array+0x1e>
 8002bfc:	08002c54 	.word	0x08002c54
 8002c00:	08002c54 	.word	0x08002c54
 8002c04:	08002c54 	.word	0x08002c54
 8002c08:	08002c58 	.word	0x08002c58

08002c0c <memset>:
 8002c0c:	4402      	add	r2, r0
 8002c0e:	4603      	mov	r3, r0
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d100      	bne.n	8002c16 <memset+0xa>
 8002c14:	4770      	bx	lr
 8002c16:	f803 1b01 	strb.w	r1, [r3], #1
 8002c1a:	e7f9      	b.n	8002c10 <memset+0x4>

08002c1c <_init>:
 8002c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c1e:	bf00      	nop
 8002c20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c22:	bc08      	pop	{r3}
 8002c24:	469e      	mov	lr, r3
 8002c26:	4770      	bx	lr

08002c28 <_fini>:
 8002c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c2a:	bf00      	nop
 8002c2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c2e:	bc08      	pop	{r3}
 8002c30:	469e      	mov	lr, r3
 8002c32:	4770      	bx	lr
